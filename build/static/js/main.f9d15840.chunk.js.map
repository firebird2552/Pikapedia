{"version":3,"sources":["pikapedia.png","components/Header.js","components/pokemon-list/DisplayImages.js","components/pokemon-list/RenderMonster.js","components/pokemon-list/RenderPokemon.js","components/pokemon-list/PokemonList.js","components/details/RenderMoves.js","components/details/RenderEvolutions.js","components/details/PokemonDetails.js","components/details/moves/MoveDetails.js","components/Content.js","App.js","index.js","api/GetPokemon.js"],"names":["Header","Navbar","bg","Brand","to","src","Logo","alt","className","width","height","Nav","Link","href","DisplayImages","pokemon","useState","loading","setLoading","varieties","sprites","other","front_default","image","setImage","loadImage","a","useEffect","Container","fluid","Row","Col","id","Card","Title","name","RenderMonster","monster","details","setPokemon","GetDetails","GetPokemonDetails","then","result","colors","cardStyle","style","types","undefined","map","type","length","background","toUpperCase","Subtitle","Body","Text","RenderOnePokemon","NavLink","onClick","displayDetails","toggleDisplay","entry_number","pokemon_species","RenderOnePokemonWithDetails","RenderPokemon","PokemonList","props","searchKeyword","setSearchKeyword","displayedPokemon","setDisplayedPokemon","region","setRegion","updatedDisplayedPokemon","useMemo","display","filteredPokemon","filter","onePokemon","includes","toLowerCase","i","push","updatePokemon","useCallback","console","log","pokemonPromise","GetPokemonList","pokemonList","Form","onSubmit","e","preventDefault","Group","as","Label","Control","onChange","event","target","value","games","regionName","filterByRegion","defaultValue","RenderMoves","moves","versionGroups","setVersionGroups","getVersions","Versions","axios","get","response","data","results","moveElements","version_group_details","move","moveNumber","url","split","moveDetails","ListGroup","Item","item","version_group","gameLinks","find","version","versions","game","items","move_learn_method","level_learned_at","number","Accordion","Toggle","Button","eventKey","icon","faCaretSquareDown","Collapse","variant","RenderEvolution","evolutionChain","evolutionList","setEvolutionList","GetEvolutions","chain","species","evolves_to","secondEvo","Object","assign","isUpdated","evolutions","firstEvo","Img","evolution_details","min_level","thirdEvo","evo","evolvesTo","evoTwo","evoList","evolutionItems","PokemonDetails","setDetails","getDetails","tempDetails","error","RenderImages","images","evolution_chain","stats","stat","base_stat","getInitialProps","query","MoveDetails","detailsPromise","location","search","slice","replace","damage_class","power","pp","accuracy","descriptions","flavor_text_entries","flavor_text","language","RenderDescriptions","Content","exact","path","component","App","ReactDOM","render","StrictMode","document","getElementById","generation","Array","generationPromise","generationDetails","pokemon_entries","getPokemonImage","imageURL","imagePromise","responseType","localImage","imageString","Buffer","from","toString","pokemonDetails"],"mappings":"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","file":"static/js/main.f9d15840.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/pikapedia.5918336a.png\";","// React imports\r\nimport React from 'react'\r\nimport Logo from '../pikapedia.png'\r\n\r\n\r\n//Library imports\r\nimport { Link } from 'react-router-dom'\r\n\r\n// react-bootstrap imports\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Nav from 'react-bootstrap/Nav'\r\n\r\n// custom imports\r\n\r\n//functional react component\r\nconst Header = () => {\r\n    return (\r\n        <Navbar bg=\"light\">\r\n            <Navbar.Brand>\r\n                <Link to='/'>\r\n                    <img src={Logo} alt=\"Pikapedia\" className=\"mw-100 h-auto\" width=\"315\" height=\"100\" />\r\n                </Link>\r\n                <Nav>\r\n                    <Nav.Link href=\"/Version1\">Red/Blue</Nav.Link>\r\n                </Nav>\r\n            </Navbar.Brand>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport default Header","// React imports\r\nimport React, { useState, useMemo, useEffect, useCallback } from 'react'\r\n\r\n//Library imports\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Card from 'react-bootstrap/Card'\r\n// custom imports\r\n\r\n//functional react component\r\nconst DisplayImages = ({ pokemon }) => {\r\n    const [loading, setLoading] = useState(true)\r\n    const [image, setImage] = useState(pokemon.varieties[0].pokemon.sprites.other['official-artwork'].front_default)\r\n\r\n    const loadImage = async () => {\r\n        setImage(await image)\r\n        setLoading(false)\r\n    }\r\n    useEffect(() => {\r\n        loadImage()\r\n    }, []);\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Row>\r\n                <Col id=\"default-img\" className=\"d-flex justify-content-center\">\r\n                    {!loading ?\r\n                        <img\r\n                            src={`data:image/png;base64, ${image}`}\r\n                            alt={`Default apperance for ${pokemon.name}`} />\r\n                        : <Card.Title>Loading...</Card.Title>}\r\n                </Col>\r\n            </Row>\r\n        </Container >\r\n    )\r\n}\r\nexport default DisplayImages\r\n\r\n\r\n\r\n","// React imports\r\nimport React, { useState, useEffect } from 'react'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\n\r\n//Library imports\r\nimport Card from 'react-bootstrap/Card'\r\nimport DisplayImages from './DisplayImages'\r\nimport { GetPokemonDetails } from '../../api/GetPokemon'\r\n\r\n// custom imports\r\n\r\n//functional react component\r\nconst RenderMonster = ({ id, monster, details = false }) => {\r\n    const [pokemon, setPokemon] = useState(monster)\r\n    const [loading, setLoading] = useState(true)\r\n\r\n\r\n\r\n    const GetDetails = async () => {\r\n        await GetPokemonDetails(pokemon).then(result => {\r\n            setPokemon(result)\r\n            setLoading(false)\r\n\r\n        })\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        GetDetails()\r\n    }, [])\r\n\r\n    const colors = {\r\n        // from https://www.epidemicjohto.com/t882-type-colors-hex-colors\r\n        \"normal\": \"A8A77A\",\r\n        \"fire\": \"EE8130\",\r\n        \"water\": \"6390F0\",\r\n        \"electric\": \"F7D02C\",\r\n        \"grass\": \"7AC74C\",\r\n        \"ice\": \"96D9D6\",\r\n        \"fighting\": \"C22E28\",\r\n        \"poison\": \"A33EA1\",\r\n        \"ground\": \"E2BF65\",\r\n        \"flying\": \"A98FF3\",\r\n        \"psychic\": \"F95587\",\r\n        \"bug\": \"A6B91A\",\r\n        \"rock\": \"B6A136\",\r\n        \"ghost\": \"735797\",\r\n        \"dragon\": \"6F35FC\",\r\n        \"dark\": \"705746\",\r\n        \"steel\": \"B7B7CE\",\r\n        \"fairy\": \"D685AD\",\r\n    }\r\n\r\n    const cardStyle = () => {\r\n        const types = pokemon.varieties !== undefined ? pokemon.varieties[0].pokemon.types.map(type => (type.type.name)) : []\r\n\r\n        let style\r\n        if (types.length > 1) {\r\n            style = { background: `linear-gradient(to right, #${colors[types[0]]}, #${colors[types[1]]}` }\r\n        }\r\n        else if (types.length === 1) {\r\n            style = {\r\n                background: `#${colors[types[0]]}`\r\n            }\r\n        }\r\n        return style\r\n    }\r\n\r\n    const RenderPokemonCard = () => {\r\n        if (!loading) {\r\n            return (\r\n                <Col>\r\n                    <Card>\r\n                        <Card.Header style={cardStyle()}>\r\n                            <Card.Title className=\"text-center text-white\">\r\n                                #{id} {monster.name.toUpperCase()}\r\n                            </Card.Title>\r\n                            <Container>\r\n                                <Row>{pokemon.varieties !== undefined ? pokemon.varieties[0].pokemon.types !== undefined ? pokemon.varieties[0].pokemon.types.map(type => {\r\n                                    return (\r\n                                        <Col key={type.type.name}>\r\n                                            <Card.Subtitle className=\"text-white text-center\">\r\n                                                {type.type.name}\r\n                                            </Card.Subtitle>\r\n                                        </Col>)\r\n                                }) : null : null}\r\n                                </Row>\r\n                            </Container>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            {!loading ?\r\n                                    <DisplayImages pokemon={pokemon} />\r\n                                : <Card.Text className=\"text-center\">Loading...</Card.Text>}\r\n                        </Card.Body>\r\n\r\n                    </Card>\r\n                </Col>\r\n            )\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    return RenderPokemonCard()\r\n}\r\n\r\nexport const RenderDetails = () => {\r\n\r\n    return (<p>How much wood could a wood chuck norris chuck if a wood chuck norris could chuck your moms wood</p>)\r\n\r\n}\r\nexport default RenderMonster","\r\n// library imports\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport NavLink from 'react-bootstrap/NavLink'\r\n\r\n\r\nimport RenderMonster from './RenderMonster'\r\n// import { RenderDetails } from './RenderMonster'\r\n\r\n\r\nconst toggleDisplay = (pokemon) => {\r\n    // Assign the current displayDetails to a temp variable\r\n    pokemon.displayDetails = !pokemon.displayDetails\r\n}\r\n\r\n/** Render a pokemon without their detail box */\r\nconst RenderOnePokemon = ({ pokemon, id }) => {\r\n    return (\r\n        <Col key={pokemon.pokemon_species.name} className=\"col-12 col-md-6 col-lg-4\">\r\n            <NavLink onClick={() => {\r\n                toggleDisplay(pokemon)\r\n            }}>\r\n                <RenderMonster id={pokemon.entry_number} monster={pokemon.pokemon_species} />\r\n            </NavLink>\r\n        </Col>\r\n    )\r\n}\r\n\r\n/** Render a pokemon with their detail box */\r\nconst RenderOnePokemonWithDetails = ({ pokemon, id }) => {\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <RenderOnePokemon pokemon={pokemon} id={id} />\r\n                <Col className=\"col-12 col-md-6 col-lg-8\">\r\n                    {/* <RenderDetails /> */}\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n\r\n}\r\n/**  \r\n * Iterates through all pokemon in the pokemon list \r\n * creates a jsx element for each one \r\n * depending on if it is displaying its details or not\r\n */\r\n\r\nconst RenderPokemon = (pokemon, id) => {\r\n    let renderedPokemon\r\n    if (pokemon.displayDetails) {\r\n        // console.log(\"Pikapedia.net -> RenderPokemon -> with details\")\r\n        renderedPokemon = <RenderOnePokemonWithDetails pokemon={pokemon} id={id} />\r\n    } else {\r\n        renderedPokemon = <RenderOnePokemon key={pokemon.pokemon_species.name} pokemon={pokemon} id={id} />\r\n    }\r\n\r\n    return renderedPokemon\r\n}\r\n\r\nexport default RenderPokemon","// React imports\r\nimport React, { useState, useEffect, useCallback, useMemo } from 'react'\r\n\r\n//Library imports\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Form from 'react-bootstrap/Form'\r\n\r\n// custom imports\r\nimport { GetPokemonList } from '../../api/GetPokemon'\r\nimport RenderPokemon from './RenderPokemon'\r\n\r\n//functional react component\r\nconst PokemonList = (props) => {\r\n    const [pokemon, setPokemon] = useState([])\r\n    const [searchKeyword, setSearchKeyword] = useState(\"\")\r\n    const [displayedPokemon, setDisplayedPokemon] = useState(pokemon)\r\n    const [loading, setLoading] = useState(true)\r\n    const [region, setRegion] = useState(2)\r\n\r\n    /**\r\n     * When the page loads for the first time -> Load the Kanto region pokemon -> display the pokemon once loaded\r\n     * \r\n     * Fix search bar\r\n     * change region to dropdown\r\n     * add back in type dropdowns\r\n     */\r\n\r\n    const updatedDisplayedPokemon = useMemo(() => {\r\n        let display = []\r\n        let filteredPokemon = searchKeyword.length !== 0 ? pokemon.filter(onePokemon => onePokemon.pokemon_species.name.includes(searchKeyword.toLowerCase())) : pokemon\r\n        if (filteredPokemon.length > 0) {\r\n            for (let i = 0; i < filteredPokemon.length; i++) {\r\n                filteredPokemon.displayDetails = false\r\n                display.push(RenderPokemon(filteredPokemon[i]))\r\n            }\r\n        } else {\r\n            display.push(<Col><h3>No Results</h3></Col>)\r\n        }\r\n        return display\r\n    }, [searchKeyword, pokemon])\r\n\r\n    const filterByRegion = regionName => {\r\n        console.log(`filter by region -> region name: ${regionName}`)\r\n        switch (regionName) {\r\n            case \"Generation One - Kanto\":\r\n                setRegion(2)\r\n                break\r\n\r\n            case \"Generation Two - Johto\":\r\n\r\n                setRegion(3)\r\n                break\r\n\r\n            case \"Generation Three - Hoenn\":\r\n\r\n                setRegion(4)\r\n                break\r\n\r\n            case \"Generation Four - Sinnoh\":\r\n                setRegion(5)\r\n                break\r\n\r\n            case \"Generation Five - Unova\":\r\n                setRegion(6)\r\n                break\r\n\r\n            case \"Generation Six - Kalos\":\r\n                setRegion(7)\r\n                break\r\n\r\n            case \"Generation Seven - Alola\":\r\n                setRegion(8)\r\n                break\r\n\r\n            case \"Generation Eight - Galar\":\r\n                setRegion(9)\r\n                break\r\n\r\n            case \"All Generations\":\r\n                setRegion(1)\r\n                break\r\n            default:\r\n                setRegion(2)\r\n                break\r\n        }\r\n    }\r\n\r\n    const updatePokemon = useCallback(async () => {\r\n        console.log('updatePokemon')\r\n        let pokemonPromise = GetPokemonList(region)\r\n        let pokemonList = await pokemonPromise\r\n        setPokemon(pokemonList)\r\n    }, [region])\r\n\r\n\r\n    useEffect(() => {\r\n        setLoading(true)\r\n        updatePokemon()\r\n    }, [updatePokemon])\r\n\r\n    useEffect(() => {\r\n\r\n        if (pokemon.length > 0) {\r\n            setLoading(false)\r\n            setDisplayedPokemon(updatedDisplayedPokemon)\r\n        }\r\n    }, [pokemon, updatedDisplayedPokemon])\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Row>\r\n                <Col>\r\n                    <Form onSubmit={e => e.preventDefault()}>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col}>\r\n                                <Form.Label >Search:</Form.Label>\r\n                                <Form.Control type=\"text\" id=\"searchBox\" onChange={event => setSearchKeyword(event.target.value)} />\r\n\r\n                            </Form.Group>\r\n                            {props.games === undefined ? <Form.Group as={Col} className=\"col-12 col-md-3\">\r\n                                <Form.Label>Select a generation/region</Form.Label>\r\n                                <Form.Control onChange={event => filterByRegion(event.target.value)} as=\"select\" name=\"generations\" id=\"generationSelect\" defaultValue=\"Generation One - Kanto\">\r\n                                    <option>Generation One - Kanto</option>\r\n                                    <option>Generation Two - Johto</option>\r\n                                    <option>Generation Three - Hoenn</option>\r\n                                    <option>Generation Four - Sinnoh</option>\r\n                                    <option>Generation Five - Unova</option>\r\n                                    <option>Generation Six - Kalos</option>\r\n                                    <option>Generation Seven - Alola</option>\r\n                                    <option>Generation Eight - Galar</option>\r\n                                    <option>All Generations</option>\r\n                                </Form.Control>\r\n\r\n                            </Form.Group> : null}\r\n                        </Form.Row>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n            <Container>\r\n                <Row>\r\n                    {loading ? <Col>Loading...</Col> : displayedPokemon}\r\n                </Row>\r\n            </Container>\r\n        </Container >\r\n\r\n    )\r\n}\r\nexport default PokemonList\r\n","//react imports\r\nimport React, { useEffect, useState } from 'react'\r\n\r\nimport axios from 'axios'\r\n\r\n\r\n// bootstrap imports\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Card from 'react-bootstrap/Card'\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\nimport NavLink from 'react-bootstrap/NavLink'\r\nimport Accordion from 'react-bootstrap/Accordion'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCaretSquareDown } from '@fortawesome/free-regular-svg-icons'\r\n\r\nconst RenderMoves = ({ moves }) => {\r\n    const [loading, setLoading] = useState(true)\r\n    const [versionGroups, setVersionGroups] = useState([])\r\n\r\n    const getVersions = async () => {\r\n        let Versions = []\r\n        let versionDetails = []\r\n        await axios.get('https://pokeapi.co/api/v2/version-group/').then(response => {\r\n            const result = response.data.results\r\n            Versions = result\r\n        })\r\n\r\n        for (let i = 0; i < Versions.length; i++) {\r\n            await axios.get(`https://pokeapi.co/api/v2/version-group/${i + 1}/`).then(response => {\r\n                Versions[i] = response.data\r\n            })\r\n        }\r\n\r\n        versionDetails = Versions\r\n        setVersionGroups(versionDetails)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getVersions()\r\n        if (versionGroups.length > 0) {\r\n            setLoading(false)\r\n        }\r\n        return () => {\r\n        }\r\n    }, [versionGroups])\r\n\r\n    let moveElements = []\r\n\r\n\r\n\r\n    if (!loading) {\r\n\r\n        moves.map(({ version_group_details, move }) => {\r\n            const moveUrl = move.url.split('/')\r\n            const moveNumber = moveUrl[6]\r\n            let moveDetails = []\r\n            moveDetails.push(\r\n                <ListGroup.Item key={moveNumber}>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col>{<Card.Subtitle className=\"text-center\">Game</Card.Subtitle>}</Col>\r\n                            <Col>{<Card.Subtitle className=\"text-center\">Method</Card.Subtitle>}</Col>\r\n                            <Col>{<Card.Subtitle className=\"text-center\">Level</Card.Subtitle>}</Col>\r\n                        </Row>\r\n                    </Container>\r\n                </ListGroup.Item>)\r\n            version_group_details.map(item => {\r\n                const name = item.version_group.name\r\n\r\n                // check if the version group name matches the name in the \r\n                const version = versionGroups.find(version => version.name === name ? version : null)\r\n                const gameLinks = version.versions.map(game => {\r\n                    /*const gameUrl = game.url.split('/')\r\n                    //const gameNumber = gameUrl[6]*/\r\n\r\n                    let items = []\r\n                    items.push(\r\n                        <Col>\r\n                            {game.name}\r\n                        </Col>\r\n                    )\r\n\r\n                    return items\r\n                })\r\n                moveDetails.push(\r\n                    <ListGroup.Item>\r\n                        <Container fluid>\r\n                            <Row>\r\n                                <Col className=\"text-center\"><Container><Row>{gameLinks}</Row></Container></Col>\r\n                                <Col className=\"text-center\">{item.move_learn_method.name}</Col>\r\n                                <Col className=\"text-center\">{item.level_learned_at}</Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </ListGroup.Item>\r\n                )\r\n                return 0\r\n            })\r\n            let tempArray = move.url.split('/')\r\n            let number = tempArray[6]\r\n            moveElements.push(\r\n                <ListGroup.Item key={moveNumber}>\r\n                    <Accordion>\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Container>\r\n                                    <Row>\r\n                                        <Col className=\"col-11 text-center\">\r\n                                            <NavLink href={`/move/${move.name}?number=${number}`}>\r\n                                                <Card.Title>\r\n                                                    {move.name}\r\n                                                </Card.Title>\r\n                                            </NavLink>\r\n                                        </Col>\r\n                                        <Col className=\"col-1\">\r\n                                            <Accordion.Toggle as={Button} eventKey={moveNumber}><FontAwesomeIcon icon={faCaretSquareDown} /></Accordion.Toggle>                                        </Col>\r\n                                    </Row>\r\n                                </Container>\r\n                            </Card.Header>\r\n                            <Accordion.Collapse eventKey={moveNumber}>\r\n                                <Card.Body>\r\n                                    <ListGroup variant=\"flush\">{moveDetails}</ListGroup >\r\n                                </Card.Body>\r\n                            </Accordion.Collapse>\r\n                        </Card>\r\n                    </Accordion>\r\n                </ListGroup.Item >)\r\n            return 0\r\n        })\r\n\r\n    } else { moveElements.push(<Card.Title>Loading...</Card.Title>) }\r\n\r\n    return moveElements\r\n}\r\n\r\nexport default RenderMoves","// React imports\r\nimport React, { useState, useEffect } from 'react'\r\n\r\n//Library imports\r\nimport axios from 'axios'\r\n\r\n//React-Bootstrap imports\r\nimport Card from 'react-bootstrap/Card'\r\n\r\nconst RenderEvolution = ({ evolutionChain }) => {\r\n    const [loading, setLoading] = useState(true)\r\n    const [evolutionList, setEvolutionList] = useState({})\r\n\r\n    const GetEvolutions = async () => {\r\n        await axios.get(evolutionChain.url).then(response => {\r\n            evolutionChain = { ...response.data }\r\n        })\r\n        await axios.get(evolutionChain.chain.species.url).then(response => {\r\n            evolutionChain.chain.species = { ...response.data }\r\n        })\r\n        await axios.get(`https://pokeapi.co/api/v2/pokemon/${evolutionChain.chain.species.id}`)\r\n            .then(response => {\r\n                evolutionChain.chain.species = { ...response.data }\r\n            })\r\n        for (let i = 0; i < evolutionChain.chain.evolves_to.length; i++) {\r\n\r\n            let evolves_to = evolutionChain.chain.evolves_to[i]\r\n            await axios.get(evolves_to.species.url).then(response => {\r\n                evolves_to.species = { ...response.data }\r\n            })\r\n            await axios.get(`https://pokeapi.co/api/v2/pokemon/${evolves_to.species.id}`)\r\n                .then(response => {\r\n                    evolves_to.species = { ...response.data }\r\n                })\r\n            for (let secondEvo = 0; secondEvo < evolves_to.evolves_to.length; secondEvo++) {\r\n\r\n                await axios.get(evolves_to.evolves_to[secondEvo].species.url).then(response => {\r\n                    evolves_to.evolves_to[secondEvo].species = { ...response.data }\r\n                })\r\n                await axios.get(`https://pokeapi.co/api/v2/pokemon/${evolves_to.evolves_to[secondEvo].species.id}`)\r\n                    .then(response => {\r\n                        evolves_to.evolves_to[secondEvo].species = { ...response.data }\r\n                    })\r\n            }\r\n\r\n            // Load all version groups then all versions\r\n        }\r\n\r\n        setEvolutionList(Object.assign(evolutionChain.chain, { isUpdated: true }))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (loading) {\r\n            GetEvolutions()\r\n        }\r\n        if (evolutionList.isUpdated) {\r\n            setLoading(false)\r\n        }\r\n    }, [evolutionList]);\r\n\r\n    let evolutions = []\r\n\r\n    if (!loading) {\r\n        let evolutionItems = () => {\r\n            let firstEvo = (\r\n                <Card>\r\n                    <Card.Header>\r\n                        <Card.Subtitle className=\"text-center text-uppercase\">\r\n                            {evolutionList.species.name}\r\n                        </Card.Subtitle>\r\n                    </Card.Header>\r\n                    <Card.Img src={evolutionList.species.sprites.front_default} />\r\n                    <Card.Body>\r\n                        <Card.Text className=\"text-center\">\r\n                            Level\r\n                        </Card.Text>\r\n                        <Card.Text className=\"text-center\">\r\n                            {evolutionList.evolves_to[0].evolution_details[0].min_level}\r\n                        </Card.Text>\r\n                    </Card.Body>\r\n                </Card>)\r\n\r\n            let secondEvo = []\r\n            let thirdEvo = []\r\n            for (let evo = 0; evo < evolutionList.evolves_to.length; evo++) {\r\n\r\n                const evolvesTo = evolutionList.evolves_to[evo]\r\n                console.log(evolvesTo)\r\n                secondEvo.push(\r\n                    <Card>\r\n                        <Card.Header>\r\n                            <Card.Subtitle className=\"text-center text-uppercase\">\r\n                                {evolvesTo.species.name}\r\n                            </Card.Subtitle>\r\n                        </Card.Header>\r\n                        <Card.Img src={evolvesTo.species.sprites.front_default} />\r\n                        <Card.Body>\r\n                            <Card.Text className=\"text-center\">\r\n                                Level\r\n                            </Card.Text>\r\n                            <Card.Text className=\"text-center\">\r\n                                {evolvesTo.evolves_to[0].evolution_details[0].min_level}\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n                    </Card>\r\n                )\r\n                for (let evoTwo = 0; evoTwo < evolvesTo.evolves_to.length; evoTwo++) {\r\n                    thirdEvo.push(\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Card.Subtitle className=\"text-center text-uppercase\">\r\n                                    {evolvesTo.evolves_to[evoTwo].species.name}\r\n                                </Card.Subtitle>\r\n                            </Card.Header>\r\n                            <Card.Img src={evolvesTo.evolves_to[evoTwo].species.sprites.front_default} />\r\n                            <Card.Body>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    )\r\n                }\r\n            }\r\n            let evoList = []\r\n            evoList.push(firstEvo)\r\n            evoList.push(secondEvo)\r\n            evoList.push(thirdEvo)\r\n\r\n\r\n            return evoList\r\n        }\r\n\r\n        evolutions = evolutionItems()\r\n    } else { evolutions = <Card.Title className=\"text-center\">Loading...</Card.Title> }\r\n\r\n    return evolutions\r\n\r\n}\r\n\r\nexport default RenderEvolution","\r\n// React imports\r\nimport React, { useState, useEffect } from 'react'\r\n\r\n//Library imports\r\nimport axios from 'axios'\r\n\r\n//React-Bootstrap imports\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Card from 'react-bootstrap/Card'\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\n\r\n// custom imports\r\nimport RenderMoves from './RenderMoves'\r\nimport RenderEvolution from './RenderEvolutions'\r\n\r\n\r\n//functional react component\r\nconst PokemonDetails = (props) => {\r\n\r\n    const [details, setDetails] = useState(props.details)\r\n    const number = details.id\r\n    console.log(details)\r\n    const getDetails = async (url) => {\r\n\r\n        let tempDetails = {}\r\n\r\n        await axios.get(url).then(response => {\r\n\r\n            tempDetails = response.data\r\n        }\r\n            , (error => {\r\n                console.log(error)\r\n            }))\r\n        await axios.get(tempDetails.species.url).then(response => {\r\n\r\n            tempDetails.species = response.data\r\n        }\r\n            , (error => {\r\n                console.log(error)\r\n            }))\r\n        setDetails(tempDetails)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (details === undefined) {\r\n            if (number) {\r\n                const url = `https://pokeapi.co/api/v2/pokemon/${number}`\r\n                getDetails(url)\r\n            }\r\n        }\r\n    }, [number, details]);\r\n\r\n\r\n    const RenderImages = () => {\r\n        let imageNames = [\"front_default\", \"back_default\", \"front_shiny\", \"back_shiny\", \"front_female\", \"back_female\", \"front_shiny_female\", \"back_shiny_female\"]\r\n        let images = []\r\n\r\n        imageNames.map(name => {\r\n\r\n            if (details.sprites !== undefined) {\r\n                if (details.sprites[name] !== null) {\r\n                    images.push(<Col className=\"col-12 col-md-3\"><Card.Img src={details.sprites[name]} /></Col>)\r\n                }\r\n            }\r\n            return 0\r\n        })\r\n\r\n        return images\r\n    }\r\n\r\n\r\n\r\n    console.log(details)\r\n\r\n    return (\r\n        <div>\r\n            <Card.Body>\r\n                {details.types !== undefined ? details.types.map(({ type }) => {\r\n                    return (\r\n                        <Col>\r\n                            <Card.Subtitle className=\"text-center\">{type.name.toUpperCase()}</Card.Subtitle>\r\n                        </Col>\r\n                    )\r\n                }) : null}\r\n                <RenderImages />\r\n            </Card.Body>\r\n            <Card.Body>\r\n                <Card.Subtitle className=\"text-center\">Evolution</Card.Subtitle><hr />\r\n                {details !== undefined ? <RenderEvolution evolutionChain={details.evolution_chain} /> : <Col>Loading</Col>}\r\n            </Card.Body>\r\n            <Card.Body>\r\n                <Card.Subtitle className=\"text-center\">Base Stats</Card.Subtitle>\r\n                <hr />\r\n                <ListGroup variant=\"flush\">\r\n                    {details.varieties[0].pokemon.stats !== undefined ? details.varieties[0].pokemon.stats.map((stat) => {\r\n                        return (\r\n                            <ListGroup.Item>\r\n                                <Container>\r\n                                    <Row>\r\n                                        <Col>{stat.stat.name}</Col>\r\n                                        <Col>{stat.base_stat}</Col>\r\n                                    </Row>\r\n                                </Container>\r\n                            </ListGroup.Item>)\r\n                    }) : null}\r\n                </ListGroup>\r\n            </Card.Body>\r\n            <Card.Body>\r\n                <Container fluid>\r\n                    <Row>\r\n                        <Col >\r\n                            <Card.Subtitle className=\"text-center\">Moves</Card.Subtitle>\r\n                        </Col>\r\n                    </Row>\r\n                    <hr />\r\n                    <Row>\r\n                        <Col>\r\n                            <ListGroup variant=\"flush\">\r\n                                <RenderMoves moves={details.varieties[0].pokemon.moves} />\r\n                            </ListGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n\r\n            </Card.Body>\r\n        </div >\r\n    )\r\n}\r\n\r\n// Evolution Chain -> images -> level -> links\r\n\r\nPokemonDetails.getInitialProps = async ({ query }) => {\r\n    const number = query.number\r\n    let details = {}\r\n    if (number) {\r\n        const url = 'https://pokeapi.co/api/v2/'\r\n        const pokemon = `pokemon/${number}`\r\n\r\n        await axios.get(url + pokemon).then(response => {\r\n\r\n            details = response.data\r\n        }\r\n            , (error => {\r\n                console.log(error)\r\n            }))\r\n        await axios.get(details.species.url).then(response => {\r\n\r\n            details.species = response.data\r\n        }\r\n            , (error => {\r\n                console.log(error)\r\n            }))\r\n        /**\r\n         * once evolution chain is loaded\r\n         * determine if pokemon evolves\r\n         * if pokemon evolves how many times does it evolve\r\n         * Make axios call for each evolution\r\n         */\r\n\r\n    }\r\n\r\n    return { details }\r\n}\r\n\r\nexport default PokemonDetails","// React imports\r\nimport React, { useEffect, useState } from 'react'\r\n\r\n//Library imports\r\nimport axios from 'axios'\r\n\r\n//React-Bootstrap imports\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Card from 'react-bootstrap/Card'\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\n\r\n// custom imports\r\n\r\n//functional react component\r\nconst MoveDetails = (props) => {\r\n\r\n    console.log(props)\r\n    const [details, setDetails] = useState({})\r\n\r\n    const getDetails = async (url) => {\r\n        let detailsPromise = axios.get(url)\r\n        //     .then(response => {\r\n\r\n        //     setDetails(response.data)\r\n        // }\r\n        //     , (error => {\r\n        //         console.log(error)\r\n        //     }))\r\n        let details = await detailsPromise\r\n        console.log(`Move Details -> get Details -> details: ${details}`)\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        const number = props.location.search.slice(8)\r\n        if (number) {\r\n            const url = `https://pokeapi.co/api/v2/move/${number}`\r\n            console.log(url)\r\n            getDetails(url)\r\n        }\r\n\r\n    }, []);\r\n\r\n    const RenderDescriptions = () => {\r\n        let descriptions = []\r\n\r\n        details.flavor_text_entries.map(({ flavor_text, language, version_group }) => {\r\n            if (language.name === \"en\") {\r\n                descriptions.push(\r\n                    <ListGroup.Item key={details.version_group}>\r\n                        <Container>\r\n                            <Row>\r\n                                <Col className=\"col-12 col-md-4\">{version_group.name}</Col>\r\n                                <Col className=\"col-12 col-md-8\">{flavor_text}</Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </ListGroup.Item>\r\n                )\r\n            }\r\n\r\n        })\r\n\r\n        return descriptions\r\n    }\r\n\r\n    if (details.name !== undefined) {\r\n        details.name = details.name !== undefined ? details.name.replace('-', \" \") : undefined\r\n        return (\r\n            <Card>\r\n                <Card.Header>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col>\r\n                                <Card.Title className=\"text-center text-uppercase\">\r\n                                    {details.name}\r\n                                </Card.Title>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Card.Header>\r\n                <Card.Header className=\"text-center\">\r\n                    <Row>\r\n                        <Col>\r\n                            Damage Type\r\n                        </Col>\r\n                        <Col>\r\n                            Power\r\n                        </Col>\r\n                        <Col>PP</Col>\r\n                        <Col>Accuracy</Col>\r\n                    </Row>\r\n                    <hr />\r\n                    <Row>\r\n                        <Col>\r\n                            {details.damage_class.name} - {details.type.name}\r\n                        </Col>\r\n                        <Col>\r\n                            {details.power}\r\n                        </Col>\r\n                        <Col>\r\n                            {details.pp}\r\n                        </Col>\r\n                        <Col>\r\n                            {details.accuracy}\r\n                        </Col>\r\n                    </Row>\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <ListGroup variant=\"flush\">\r\n                        <ListGroup.Item >\r\n                            <Container>\r\n                                <Row>\r\n                                    <Col className=\"col-12 col-md-4\"><Card.Subtitle>Game</Card.Subtitle></Col>\r\n                                    <Col className=\"col-12 col-md-8\"><Card.Subtitle>Description</Card.Subtitle></Col>\r\n                                </Row>\r\n                            </Container>\r\n                        </ListGroup.Item>\r\n                        {RenderDescriptions()}\r\n                    </ListGroup>\r\n                </Card.Body>\r\n            </Card>\r\n\r\n        )\r\n    } else {\r\n        return <Col><Card.Title>Loading...</Card.Title></Col>\r\n    }\r\n}\r\n\r\nexport default MoveDetails","// React imports\r\nimport React from 'react'\r\nimport { Switch, Route } from 'react-router-dom'\r\n\r\n//Library imports\r\n\r\n// custom imports\r\nimport PokemonList from './pokemon-list/PokemonList'\r\nimport PokemonDetails from './details/PokemonDetails'\r\nimport MoveDetails from './details/moves/MoveDetails'\r\n\r\n//functional react component\r\nconst Content = () => {\r\n    return (\r\n        <Switch>\r\n            <Route exact path='/' component={PokemonList} />\r\n            <Route path='/Version1'>\r\n                <PokemonList games={[\"red\", \"blue\"]} />\r\n            </Route>\r\n            <Route exact path=\"/pokemon/:pokemonName\" component={PokemonDetails} />\r\n            <Route exact path=\"/move/:moveName\" component={MoveDetails} />\r\n        </Switch>\r\n    )\r\n}\r\nexport default Content","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nimport { BrowserRouter as Router } from 'react-router-dom'\n\n// Custom imports\nimport Header from './components/Header'\nimport Content from './components/Content'\n\nfunction App() {\n  return (\n    <Router className=\"App\">\n      <Header />\n      <Content />\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);","//Library imports\r\nimport axios from 'axios'\r\n\r\n// custom imports\r\n\r\n//functional react component\r\nexport const GetPokemonList = async (generation) => {\r\n    let pokemonList = {}\r\n    if (typeof (generation) === Array) {\r\n\r\n    } else if (typeof (generation) === \"number\") {\r\n        console.error(generation)\r\n        let generationPromise = axios.get(`https://pokeapi.co/api/v2/pokedex/${generation}/`)\r\n        // .then(response => {\r\n        //     pokemonList = response.data.pokemon_entries\r\n        // }\r\n        //     , (error => {\r\n        //         console.log(error)\r\n        //     }))\r\n        let generationDetails = await generationPromise\r\n        // console.log(`api -> GetPokemonList -> Generation: ${generation} - Generation Details: ${JSON.stringify(generationDetails)}`)\r\n        pokemonList = generationDetails.data.pokemon_entries\r\n\r\n    }\r\n\r\n    return pokemonList\r\n}\r\nconst getPokemonImage = async (imageURL) => {\r\n    let imagePromise = axios.get(imageURL, { responseType: 'arraybuffer' })\r\n    let localImage = await imagePromise\r\n    let imageString = Buffer.from(localImage.data, 'binary').toString('base64')\r\n    return imageString\r\n    \r\n}\r\n\r\nexport const GetPokemonDetails = async (pokemon) => {\r\n    try {\r\n\r\n        let pokemonPromise = axios.get(pokemon.url)\r\n        let pokemonDetails = await pokemonPromise\r\n        pokemon = pokemonDetails.data\r\n\r\n        pokemonPromise = axios.get(pokemon.varieties[0].pokemon.url)\r\n        // .then(response => {\r\n        //     pokemon.varieties[0].pokemon = response.data\r\n        // }\r\n        //     , (error => {\r\n        //         console.log(error)\r\n        //     }))\r\n\r\n        pokemonDetails = await pokemonPromise\r\n        let imageURL = pokemonDetails.data.sprites.other['official-artwork'].front_default\r\n\r\n        pokemonDetails.data.sprites.other['official-artwork'].front_default = getPokemonImage(imageURL)\r\n        pokemon.varieties[0].pokemon = pokemonDetails.data\r\n\r\n        // console.log(`pikapedia.net -> GetPokemonDetails -> pokemon: ${JSON.stringify(pokemon)} \\n`)\r\n    } catch (err) {\r\n        console.log(err)\r\n    } finally {\r\n        return pokemon\r\n\r\n    }\r\n}"],"sourceRoot":""}