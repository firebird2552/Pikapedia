[{"C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\index.js":"1","C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\reportWebVitals.js":"2","C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\App.js":"3","C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\components\\Header.js":"4","C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\components\\Content.js":"5","C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\components\\details\\PokemonDetails.js":"6","C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\components\\details\\moves\\MoveDetails.js":"7","C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\components\\pokemon-list\\PokemonList.js":"8","C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\components\\details\\RenderEvolutions.js":"9","C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\components\\details\\RenderMoves.js":"10","C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\components\\pokemon-list\\RenderMonster.js":"11"},{"size":500,"mtime":1611447413288,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1611447413288,"results":"14","hashOfConfig":"13"},{"size":360,"mtime":1611449691511,"results":"15","hashOfConfig":"13"},{"size":541,"mtime":1611683992274,"results":"16","hashOfConfig":"13"},{"size":664,"mtime":1611456563157,"results":"17","hashOfConfig":"13"},{"size":5667,"mtime":1611688417674,"results":"18","hashOfConfig":"13"},{"size":4195,"mtime":1611457142402,"results":"19","hashOfConfig":"13"},{"size":7117,"mtime":1611954382215,"results":"20","hashOfConfig":"13"},{"size":6299,"mtime":1611453981357,"results":"21","hashOfConfig":"13"},{"size":5532,"mtime":1611688739851,"results":"22","hashOfConfig":"13"},{"size":6351,"mtime":1611690364495,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"iq4tbi",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\index.js",[],["51","52"],"C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\reportWebVitals.js",[],"C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\App.js",[],"C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\components\\Header.js",[],"C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\components\\Content.js",[],"C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\components\\details\\PokemonDetails.js",["53"],"\r\n// React imports\r\nimport React, { useState, useEffect } from 'react'\r\n\r\n//Library imports\r\nimport axios from 'axios'\r\n\r\n//React-Bootstrap imports\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Card from 'react-bootstrap/Card'\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\n\r\n// custom imports\r\nimport RenderMoves from './RenderMoves'\r\nimport RenderEvolution from './RenderEvolutions'\r\n\r\n\r\n//functional react component\r\nconst PokemonDetails = (props) => {\r\n    const [details, setDetails] = useState({})\r\n    const number = props.location.search.slice(8)\r\n    const getDetails = async (url) => {\r\n\r\n        let tempDetails = {}\r\n\r\n        await axios.get(url).then(response => {\r\n\r\n            tempDetails = response.data\r\n        }\r\n            , (error => {\r\n                console.log(error)\r\n            }))\r\n        await axios.get(tempDetails.species.url).then(response => {\r\n\r\n            tempDetails.species = response.data\r\n        }\r\n            , (error => {\r\n                console.log(error)\r\n            }))\r\n        setDetails(tempDetails)\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log(\"props: \", props)\r\n        console.log(\"Number:\" + number)\r\n        if (number) {\r\n            const url = `https://pokeapi.co/api/v2/pokemon/${number}`\r\n            getDetails(url)\r\n        }\r\n    }, [number]);\r\n\r\n\r\n    const RenderImages = () => {\r\n        let imageNames = [\"front_default\", \"back_default\", \"front_shiny\", \"back_shiny\", \"front_female\", \"back_female\", \"front_shiny_female\", \"back_shiny_female\"]\r\n        let images = []\r\n\r\n        imageNames.map(name => {\r\n\r\n            if (details.sprites !== undefined) {\r\n                if (details.sprites[name] !== null) {\r\n                    images.push(<Col className=\"col-12 col-md-3\"><Card.Img src={details.sprites[name]} /></Col>)\r\n                }\r\n            }\r\n            return 0\r\n        })\r\n\r\n        return images\r\n    }\r\n\r\n\r\n\r\n    console.log(details)\r\n\r\n    return (\r\n        <>\r\n            <Card>\r\n                <Card.Header>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col>\r\n                                <Card.Title className=\"text-center\">\r\n                                    {details.name !== undefined ? details.name.toUpperCase() : null}\r\n                                </Card.Title>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            {details.types !== undefined ? details.types.map(({ type }) => {\r\n                                return (\r\n                                    <Col>\r\n                                        <Card.Subtitle className=\"text-center\">{type.name.toUpperCase()}</Card.Subtitle>\r\n                                    </Col>\r\n                                )\r\n                            }) : null}\r\n\r\n                        </Row>\r\n                    </Container>\r\n                </Card.Header>\r\n                <Container><Row>{RenderImages()}</Row></Container>\r\n                <Card.Body>\r\n                    <Card.Subtitle className=\"text-center\">Evolution</Card.Subtitle>\r\n                    <hr />{details.species !== undefined ? <RenderEvolution evolutionChain={details.species.evolution_chain} /> : <Col>Loading</Col>}\r\n                </Card.Body>\r\n                <Card.Body>\r\n                    <Card.Subtitle className=\"text-center\">Base Stats</Card.Subtitle>\r\n                    <hr />\r\n                    <ListGroup variant=\"flush\">\r\n                        {details.stats !== undefined ? details.stats.map((stat) => {\r\n                            return (<ListGroup.Item><Container><Row><Col>{stat.stat.name}</Col><Col>{stat.base_stat}</Col></Row></Container></ListGroup.Item>)\r\n                        }) : null}\r\n                    </ListGroup>\r\n                </Card.Body>\r\n                <Card.Body>\r\n                    <Container fluid>\r\n                        <Row>\r\n                            <Col >\r\n                                <Card.Subtitle className=\"text-center\">Moves</Card.Subtitle>\r\n                            </Col>\r\n                        </Row>\r\n                        <hr />\r\n                        <Row>\r\n                            <Col>\r\n                                <ListGroup variant=\"flush\">\r\n                                    <RenderMoves moves={details.moves} />\r\n                                </ListGroup>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n\r\n                </Card.Body>\r\n            </Card>\r\n        </>\r\n    )\r\n}\r\n\r\n// Evolution Chain -> images -> level -> links\r\n\r\nPokemonDetails.getInitialProps = async ({ query }) => {\r\n    const number = query.number\r\n    let details = {}\r\n    if (number) {\r\n        const url = 'https://pokeapi.co/api/v2/'\r\n        const pokemon = `pokemon/${number}`\r\n\r\n        await axios.get(url + pokemon).then(response => {\r\n\r\n            details = response.data\r\n        }\r\n            , (error => {\r\n                console.log(error)\r\n            }))\r\n        await axios.get(details.species.url).then(response => {\r\n\r\n            details.species = response.data\r\n        }\r\n            , (error => {\r\n                console.log(error)\r\n            }))\r\n        /**\r\n         * once evolution chain is loaded\r\n         * determine if pokemon evolves\r\n         * if pokemon evolves how many times does it evolve\r\n         * Make axios call for each evolution\r\n         */\r\n\r\n    }\r\n\r\n    return { details }\r\n}\r\n\r\nexport default PokemonDetails","C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\components\\details\\moves\\MoveDetails.js",["54","55"],"// React imports\r\nimport React, { useEffect, useState } from 'react'\r\n\r\n//Library imports\r\nimport axios from 'axios'\r\n\r\n//React-Bootstrap imports\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Card from 'react-bootstrap/Card'\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\n\r\n// custom imports\r\n\r\n//functional react component\r\nconst MoveDetails = (props) => {\r\n\r\n    console.log(props)\r\n    const [details, setDetails] = useState({})\r\n\r\n    const getDetails = async (url) => {\r\n        await axios.get(url).then(response => {\r\n\r\n            setDetails(response.data)\r\n        }\r\n            , (error => {\r\n                console.log(error)\r\n            }))\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        const number = props.location.search.slice(8)\r\n        if (number) {\r\n            const url = `https://pokeapi.co/api/v2/move/${number}`\r\n            console.log(url)\r\n            getDetails(url)\r\n        }\r\n\r\n    }, []);\r\n\r\n    const RenderDescriptions = () => {\r\n        let descriptions = []\r\n\r\n        details.flavor_text_entries.map(({ flavor_text, language, version_group }) => {\r\n            if (language.name === \"en\") {\r\n                descriptions.push(\r\n                    <ListGroup.Item key={details.version_group}>\r\n                        <Container>\r\n                            <Row>\r\n                                <Col className=\"col-12 col-md-4\">{version_group.name}</Col>\r\n                                <Col className=\"col-12 col-md-8\">{flavor_text}</Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </ListGroup.Item>\r\n                )\r\n            }\r\n\r\n        })\r\n\r\n        return descriptions\r\n    }\r\n\r\n    if (details.name !== undefined) {\r\n        details.name = details.name !== undefined ? details.name.replace('-', \" \") : undefined\r\n        return (\r\n            <Card>\r\n                <Card.Header>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col>\r\n                                <Card.Title className=\"text-center text-uppercase\">\r\n                                    {details.name}\r\n                                </Card.Title>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Card.Header>\r\n                <Card.Header className=\"text-center\">\r\n                    <Row>\r\n                        <Col>\r\n                            Damage Type\r\n                        </Col>\r\n                        <Col>\r\n                            Power\r\n                        </Col>\r\n                        <Col>PP</Col>\r\n                        <Col>Accuracy</Col>\r\n                    </Row>\r\n                    <hr />\r\n                    <Row>\r\n                        <Col>\r\n                            {details.damage_class.name} - {details.type.name}\r\n                        </Col>\r\n                        <Col>\r\n                            {details.power}\r\n                        </Col>\r\n                        <Col>\r\n                            {details.pp}\r\n                        </Col>\r\n                        <Col>\r\n                            {details.accuracy}\r\n                        </Col>\r\n                    </Row>\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <ListGroup variant=\"flush\">\r\n                        <ListGroup.Item >\r\n                            <Container>\r\n                                <Row>\r\n                                    <Col className=\"col-12 col-md-4\"><Card.Subtitle>Game</Card.Subtitle></Col>\r\n                                    <Col className=\"col-12 col-md-8\"><Card.Subtitle>Description</Card.Subtitle></Col>\r\n                                </Row>\r\n                            </Container>\r\n                        </ListGroup.Item>\r\n                        {RenderDescriptions()}\r\n                    </ListGroup>\r\n                </Card.Body>\r\n            </Card>\r\n\r\n        )\r\n    } else {\r\n        return <Col><Card.Title>Loading...</Card.Title></Col>\r\n    }\r\n}\r\n\r\nexport default MoveDetails","C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\components\\pokemon-list\\PokemonList.js",["56","57","58"],"C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\components\\details\\RenderEvolutions.js",["59"],"// React imports\r\nimport React, { useState, useEffect } from 'react'\r\n\r\n//Library imports\r\nimport axios from 'axios'\r\n\r\n//React-Bootstrap imports\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Card from 'react-bootstrap/Card'\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\n\r\nconst RenderEvolution = ({ evolutionChain }) => {\r\n    const [loading, setLoading] = useState(true)\r\n    const [evolutionList, setEvolutionList] = useState({})\r\n\r\n    const GetEvolutions = async () => {\r\n        await axios.get(evolutionChain.url).then(response => {\r\n            evolutionChain = { ...response.data }\r\n        })\r\n        await axios.get(evolutionChain.chain.species.url).then(response => {\r\n            evolutionChain.chain.species = { ...response.data }\r\n        })\r\n        await axios.get(`https://pokeapi.co/api/v2/pokemon/${evolutionChain.chain.species.id}`)\r\n            .then(response => {\r\n                evolutionChain.chain.species = { ...response.data }\r\n            })\r\n        for (let i = 0; i < evolutionChain.chain.evolves_to.length; i++) {\r\n\r\n            let evolves_to = evolutionChain.chain.evolves_to[i]\r\n            await axios.get(evolves_to.species.url).then(response => {\r\n                evolves_to.species = { ...response.data }\r\n            })\r\n            await axios.get(`https://pokeapi.co/api/v2/pokemon/${evolves_to.species.id}`)\r\n                .then(response => {\r\n                    evolves_to.species = { ...response.data }\r\n                })\r\n            for (let secondEvo = 0; secondEvo < evolves_to.evolves_to.length; secondEvo++) {\r\n\r\n                await axios.get(evolves_to.evolves_to[secondEvo].species.url).then(response => {\r\n                    evolves_to.evolves_to[secondEvo].species = { ...response.data }\r\n                })\r\n                await axios.get(`https://pokeapi.co/api/v2/pokemon/${evolves_to.evolves_to[secondEvo].species.id}`)\r\n                    .then(response => {\r\n                        evolves_to.evolves_to[secondEvo].species = { ...response.data }\r\n                    })\r\n            }\r\n\r\n            // Load all version groups then all versions\r\n        }\r\n\r\n        setEvolutionList(Object.assign(evolutionChain.chain, { isUpdated: true }))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (loading) {\r\n            GetEvolutions()\r\n        }\r\n        if (evolutionList.isUpdated) {\r\n            setLoading(false)\r\n        }\r\n    }, [evolutionList]);\r\n\r\n    let evolutions = []\r\n\r\n    if (!loading) {\r\n        let evolutionItems = () => {\r\n            let firstEvo = (\r\n                <Col className=\"col-12 col-md-2\">\r\n                    <Card>\r\n                        <Card.Header>\r\n                            <Card.Subtitle className=\"text-center text-uppercase\">\r\n                                {evolutionList.species.name}\r\n                            </Card.Subtitle>\r\n                        </Card.Header>\r\n                        <Card.Img src={evolutionList.species.sprites.front_default} />\r\n                        <Card.Body>\r\n                            <Card.Text className=\"text-center\">\r\n                                Level\r\n                            </Card.Text>\r\n                            <Card.Text>\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col >)\r\n\r\n            let secondEvo = []\r\n            let thirdEvo = []\r\n            for (let evo = 0; evo < evolutionList.evolves_to.length; evo++) {\r\n\r\n                const evolvesTo = evolutionList.evolves_to[evo]\r\n                secondEvo.push(\r\n                    <Col className=\"col-12 col-md-2\">\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Card.Subtitle className=\"text-center text-uppercase\">\r\n                                    {evolvesTo.species.name}\r\n                                </Card.Subtitle>\r\n                            </Card.Header>\r\n                            <Card.Img src={evolvesTo.species.sprites.front_default} />\r\n                            <Card.Body>\r\n                                <Card.Text className=\"text-center\">\r\n                                    Level\r\n                        </Card.Text>\r\n                                <Card.Text>\r\n                                </Card.Text>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col >\r\n                )\r\n                for (let evoTwo = 0; evoTwo < evolvesTo.evolves_to.length; evoTwo++) {\r\n                    thirdEvo.push(\r\n                        <Col className=\"col-12 col-md-2\">\r\n                            <Card>\r\n                                <Card.Header>\r\n                                    <Card.Subtitle className=\"text-center text-uppercase\">\r\n                                        {evolvesTo.evolves_to[evoTwo].species.name}\r\n                                    </Card.Subtitle>\r\n                                </Card.Header>\r\n                                <Card.Img src={evolvesTo.evolves_to[evoTwo].species.sprites.front_default} />\r\n                                <Card.Body>\r\n                                    <Card.Text className=\"text-center\">\r\n                                        Level\r\n                            </Card.Text>\r\n                                    <Card.Text>\r\n                                    </Card.Text>\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </Col >\r\n                    )\r\n                }\r\n            }\r\n            let evoList = (\r\n                <Container fluid>\r\n                    <Row className=\"justify-content-center\">\r\n                        {firstEvo}\r\n                        {secondEvo}\r\n\r\n                        {thirdEvo}\r\n                    </Row>\r\n                </Container>)\r\n\r\n\r\n            return evoList\r\n        }\r\n\r\n        evolutions.push(\r\n            <ListGroup.Item>\r\n                {evolutionItems()}\r\n            </ListGroup.Item>)\r\n    } else { evolutions.push(<Card.Title className=\"text-center\">Loading...</Card.Title>) }\r\n\r\n    return evolutions\r\n\r\n}\r\n\r\nexport default RenderEvolution","C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\components\\details\\RenderMoves.js",["60"],"//react imports\r\nimport React, { useEffect, useState } from 'react'\r\n\r\nimport axios from 'axios'\r\n\r\n\r\n// bootstrap imports\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Card from 'react-bootstrap/Card'\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\nimport NavLink from 'react-bootstrap/NavLink'\r\nimport Accordion from 'react-bootstrap/Accordion'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCaretSquareDown } from '@fortawesome/free-regular-svg-icons'\r\n\r\nconst RenderMoves = ({ moves }) => {\r\n    const [loading, setLoading] = useState(true)\r\n    const [versionGroups, setVersionGroups] = useState([])\r\n\r\n    const getVersions = async () => {\r\n        let Versions = []\r\n        let versionDetails = []\r\n        await axios.get('https://pokeapi.co/api/v2/version-group/').then(response => {\r\n            const result = response.data.results\r\n            Versions = result\r\n        })\r\n\r\n        for (let i = 0; i < Versions.length; i++) {\r\n            await axios.get(`https://pokeapi.co/api/v2/version-group/${i + 1}/`).then(response => {\r\n                Versions[i] = response.data\r\n            })\r\n        }\r\n\r\n        versionDetails = Versions\r\n        setVersionGroups(versionDetails)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getVersions()\r\n        if (versionGroups.length > 0) {\r\n            setLoading(false)\r\n        }\r\n        return () => {\r\n        }\r\n    }, [versionGroups])\r\n\r\n    let moveElements = []\r\n\r\n\r\n\r\n    if (!loading) {\r\n\r\n        moves.map(({ version_group_details, move }) => {\r\n            const moveUrl = move.url.split('/')\r\n            const moveNumber = moveUrl[6]\r\n            let moveDetails = []\r\n            moveDetails.push(\r\n                <ListGroup.Item key={moveNumber}>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col>{<Card.Subtitle className=\"text-center\">Game</Card.Subtitle>}</Col>\r\n                            <Col>{<Card.Subtitle className=\"text-center\">Method</Card.Subtitle>}</Col>\r\n                            <Col>{<Card.Subtitle className=\"text-center\">Level</Card.Subtitle>}</Col>\r\n                        </Row>\r\n                    </Container>\r\n                </ListGroup.Item>)\r\n            version_group_details.map(item => {\r\n                const name = item.version_group.name\r\n\r\n                // check if the version group name matches the name in the \r\n                const version = versionGroups.find(version => version.name === name ? version : null)\r\n                const gameLinks = version.versions.map(game => {\r\n                    /*const gameUrl = game.url.split('/')\r\n                    //const gameNumber = gameUrl[6]*/\r\n\r\n                    let items = []\r\n                    items.push(\r\n                        <Col>\r\n                            {game.name}\r\n                        </Col>\r\n                    )\r\n\r\n                    return items\r\n                })\r\n                moveDetails.push(\r\n                    <ListGroup.Item>\r\n                        <Container fluid>\r\n                            <Row>\r\n                                <Col className=\"text-center\"><Container><Row>{gameLinks}</Row></Container></Col>\r\n                                <Col className=\"text-center\">{item.move_learn_method.name}</Col>\r\n                                <Col className=\"text-center\">{item.level_learned_at}</Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </ListGroup.Item>\r\n                )\r\n                return 0\r\n            })\r\n            let tempArray = move.url.split('/')\r\n            let number = tempArray[6]\r\n            moveElements.push(\r\n                <ListGroup.Item key={moveNumber}>\r\n                    <Accordion>\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Container>\r\n                                    <Row>\r\n                                        <Col className=\"col-11 text-center\">\r\n                                            <NavLink href={`/move/${move.name}?number=${number}`}>\r\n                                                <Card.Title>\r\n                                                    {move.name}\r\n                                                </Card.Title>\r\n                                            </NavLink>\r\n                                        </Col>\r\n                                        <Col className=\"col-1\">\r\n                                            <Accordion.Toggle as={Button} eventKey={moveNumber}><FontAwesomeIcon icon={faCaretSquareDown} /></Accordion.Toggle>                                        </Col>\r\n                                    </Row>\r\n                                </Container>\r\n                            </Card.Header>\r\n                            <Accordion.Collapse eventKey={moveNumber}>\r\n                                <Card.Body>\r\n                                    <ListGroup variant=\"flush\">{moveDetails}</ListGroup >\r\n                                </Card.Body>\r\n                            </Accordion.Collapse>\r\n                        </Card>\r\n                    </Accordion>\r\n                </ListGroup.Item >)\r\n            return 0\r\n        })\r\n\r\n    } else { moveElements.push(<Card.Title>Loading...</Card.Title>) }\r\n\r\n    return moveElements\r\n}\r\n\r\nexport default RenderMoves","C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\components\\pokemon-list\\RenderMonster.js",[],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":52,"column":8,"nodeType":"67","endLine":52,"endColumn":16,"suggestions":"68"},{"ruleId":"65","severity":1,"message":"69","line":41,"column":8,"nodeType":"67","endLine":41,"endColumn":10,"suggestions":"70"},{"ruleId":"71","severity":1,"message":"72","line":46,"column":84,"nodeType":"73","messageId":"74","endLine":46,"endColumn":86},{"ruleId":"65","severity":1,"message":"75","line":142,"column":8,"nodeType":"67","endLine":142,"endColumn":16,"suggestions":"76"},{"ruleId":"65","severity":1,"message":"77","line":149,"column":8,"nodeType":"67","endLine":149,"endColumn":17,"suggestions":"78"},{"ruleId":"65","severity":1,"message":"77","line":158,"column":8,"nodeType":"67","endLine":158,"endColumn":23,"suggestions":"79"},{"ruleId":"65","severity":1,"message":"80","line":63,"column":8,"nodeType":"67","endLine":63,"endColumn":23,"suggestions":"81"},{"ruleId":"82","severity":1,"message":"83","line":33,"column":87,"nodeType":"73","messageId":"84","endLine":35,"endColumn":14},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.","ArrayExpression",["87"],"React Hook useEffect has a missing dependency: 'props.location.search'. Either include it or remove the dependency array.",["88"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'filterByRegion'. Either include it or remove the dependency array.",["89"],"React Hook useEffect has a missing dependency: 'updatedDisplayedPokemon'. Either include it or remove the dependency array.",["90"],["91"],"React Hook useEffect has missing dependencies: 'GetEvolutions' and 'loading'. Either include them or remove the dependency array.",["92"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'Versions'.","unsafeRefs","no-global-assign","no-unsafe-negation",{"desc":"93","fix":"94"},{"desc":"95","fix":"96"},{"desc":"97","fix":"98"},{"desc":"99","fix":"100"},{"desc":"101","fix":"102"},{"desc":"103","fix":"104"},"Update the dependencies array to be: [number, props]",{"range":"105","text":"106"},"Update the dependencies array to be: [props.location.search]",{"range":"107","text":"108"},"Update the dependencies array to be: [filterByRegion, region]",{"range":"109","text":"110"},"Update the dependencies array to be: [pokemon, updatedDisplayedPokemon]",{"range":"111","text":"112"},"Update the dependencies array to be: [searchKeyword, updatedDisplayedPokemon]",{"range":"113","text":"114"},"Update the dependencies array to be: [GetEvolutions, evolutionList, loading]",{"range":"115","text":"116"},[1407,1415],"[number, props]",[1012,1014],"[props.location.search]",[3976,3984],"[filterByRegion, region]",[4131,4140],"[pokemon, updatedDisplayedPokemon]",[4354,4369],"[searchKeyword, updatedDisplayedPokemon]",[2499,2514],"[GetEvolutions, evolutionList, loading]"]