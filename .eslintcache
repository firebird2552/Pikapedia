[{"C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\index.js":"1","C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\App.js":"2","C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\Content.js":"3","C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\Header.js":"4","C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\details\\moves\\MoveDetails.js":"5","C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\pokemon-list\\PokemonList.js":"6","C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\details\\PokemonDetails.js":"7","C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\details\\RenderMoves.js":"8","C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\pokemon-list\\RenderMonster.js":"9","C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\details\\RenderEvolutions.js":"10","C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\pokemon-list\\RenderPokemon.js":"11","C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\api\\GetPokemon.js":"12","C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\pokemon-list\\DisplayImages.js":"13"},{"size":228,"mtime":1670112710316,"results":"14","hashOfConfig":"15"},{"size":360,"mtime":1611449691511,"results":"16","hashOfConfig":"15"},{"size":781,"mtime":1670112710308,"results":"17","hashOfConfig":"15"},{"size":767,"mtime":1670112710310,"results":"18","hashOfConfig":"15"},{"size":4361,"mtime":1670112710314,"results":"19","hashOfConfig":"15"},{"size":5827,"mtime":1670112710315,"results":"20","hashOfConfig":"15"},{"size":5246,"mtime":1670112710311,"results":"21","hashOfConfig":"15"},{"size":5532,"mtime":1611688739851,"results":"22","hashOfConfig":"15"},{"size":3901,"mtime":1670112710315,"results":"23","hashOfConfig":"15"},{"size":5484,"mtime":1670112710312,"results":"24","hashOfConfig":"15"},{"size":1988,"mtime":1670112710316,"results":"25","hashOfConfig":"15"},{"size":1552,"mtime":1670112710307,"results":"26","hashOfConfig":"15"},{"size":1385,"mtime":1670112710314,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"127bfp2",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\index.js",[],"C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\App.js",[],"C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\Content.js",[],["59","60"],"C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\Header.js",[],"C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\details\\moves\\MoveDetails.js",["61","62"],"// React imports\r\nimport React, { useEffect, useState } from 'react'\r\n\r\n//Library imports\r\nimport axios from 'axios'\r\n\r\n//React-Bootstrap imports\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Card from 'react-bootstrap/Card'\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\n\r\n// custom imports\r\n\r\n//functional react component\r\nconst MoveDetails = (props) => {\r\n\r\n    console.log(props)\r\n    const [details, setDetails] = useState({})\r\n\r\n    const getDetails = async (url) => {\r\n        let detailsPromise = axios.get(url)\r\n        //     .then(response => {\r\n\r\n        //     setDetails(response.data)\r\n        // }\r\n        //     , (error => {\r\n        //         console.log(error)\r\n        //     }))\r\n        let details = await detailsPromise\r\n        console.log(`Move Details -> get Details -> details: ${details}`)\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        const number = props.location.search.slice(8)\r\n        if (number) {\r\n            const url = `https://pokeapi.co/api/v2/move/${number}`\r\n            console.log(url)\r\n            getDetails(url)\r\n        }\r\n\r\n    }, []);\r\n\r\n    const RenderDescriptions = () => {\r\n        let descriptions = []\r\n\r\n        details.flavor_text_entries.map(({ flavor_text, language, version_group }) => {\r\n            if (language.name === \"en\") {\r\n                descriptions.push(\r\n                    <ListGroup.Item key={details.version_group}>\r\n                        <Container>\r\n                            <Row>\r\n                                <Col className=\"col-12 col-md-4\">{version_group.name}</Col>\r\n                                <Col className=\"col-12 col-md-8\">{flavor_text}</Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </ListGroup.Item>\r\n                )\r\n            }\r\n\r\n        })\r\n\r\n        return descriptions\r\n    }\r\n\r\n    if (details.name !== undefined) {\r\n        details.name = details.name !== undefined ? details.name.replace('-', \" \") : undefined\r\n        return (\r\n            <Card>\r\n                <Card.Header>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col>\r\n                                <Card.Title className=\"text-center text-uppercase\">\r\n                                    {details.name}\r\n                                </Card.Title>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Card.Header>\r\n                <Card.Header className=\"text-center\">\r\n                    <Row>\r\n                        <Col>\r\n                            Damage Type\r\n                        </Col>\r\n                        <Col>\r\n                            Power\r\n                        </Col>\r\n                        <Col>PP</Col>\r\n                        <Col>Accuracy</Col>\r\n                    </Row>\r\n                    <hr />\r\n                    <Row>\r\n                        <Col>\r\n                            {details.damage_class.name} - {details.type.name}\r\n                        </Col>\r\n                        <Col>\r\n                            {details.power}\r\n                        </Col>\r\n                        <Col>\r\n                            {details.pp}\r\n                        </Col>\r\n                        <Col>\r\n                            {details.accuracy}\r\n                        </Col>\r\n                    </Row>\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <ListGroup variant=\"flush\">\r\n                        <ListGroup.Item >\r\n                            <Container>\r\n                                <Row>\r\n                                    <Col className=\"col-12 col-md-4\"><Card.Subtitle>Game</Card.Subtitle></Col>\r\n                                    <Col className=\"col-12 col-md-8\"><Card.Subtitle>Description</Card.Subtitle></Col>\r\n                                </Row>\r\n                            </Container>\r\n                        </ListGroup.Item>\r\n                        {RenderDescriptions()}\r\n                    </ListGroup>\r\n                </Card.Body>\r\n            </Card>\r\n\r\n        )\r\n    } else {\r\n        return <Col><Card.Title>Loading...</Card.Title></Col>\r\n    }\r\n}\r\n\r\nexport default MoveDetails","C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\pokemon-list\\PokemonList.js",["63","64","65"],"// React imports\r\nimport React, { useState, useEffect } from 'react'\r\n\r\n//Library imports\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Form from 'react-bootstrap/Form'\r\n\r\n// custom imports\r\nimport { GetPokemonList } from '../../api/GetPokemon'\r\nimport RenderPokemon from './RenderPokemon'\r\n\r\n//functional react component\r\nconst PokemonList = (props) => {\r\n    const [pokemon, setPokemon] = useState([])\r\n    const [filteredPokemon, setFilteredPokemon] = useState(pokemon)\r\n    const [searchKeyword, setSearchKeyword] = useState(\"\")\r\n    const [displayedPokemon, setDisplayedPokemon] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n    const [region, setRegion] = useState(1)\r\n\r\n    /**\r\n     * When the page loads for the first time -> Load the Kanto region pokemon -> display the pokemon once loaded\r\n     * \r\n     * Fix search bar\r\n     * change region to dropdown\r\n     * add back in type dropdowns\r\n     */\r\n\r\n\r\n\r\n\r\n    const filterByRegion = () => {\r\n        let params = 1\r\n        switch (region) {\r\n            case \"Generation One - Kanto\":\r\n                params = 2\r\n                break\r\n\r\n            case \"Generation Two - Johto\":\r\n                params = 3\r\n                break\r\n\r\n            case \"Generation Three - Hoenn\":\r\n                params = 4\r\n                break\r\n\r\n            case \"Generation Four - Sinnoh\":\r\n                params = 5\r\n                break\r\n\r\n            case \"Generation Five - Unova\":\r\n                params = 6\r\n                break\r\n\r\n            case \"Generation Six - Kalos\":\r\n                params = 7\r\n                break\r\n\r\n            case \"Generation Seven - Alola\":\r\n                params = 8\r\n                break\r\n\r\n            case \"Generation Eight - Galar\":\r\n                params = 9\r\n                break\r\n\r\n            case \"All Generations\":\r\n                params = 1\r\n                break\r\n            default:\r\n                params = 2\r\n                break\r\n        }\r\n        return params\r\n\r\n    }\r\n\r\n    const updateRegion = (event) => {\r\n        const selected = event.target.value\r\n        setRegion(selected)\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        setPokemon([])\r\n        setLoading(true)\r\n        let params = filterByRegion()\r\n\r\n        const updatePokemon = async () => {\r\n            let tempPokemon = []\r\n            tempPokemon = GetPokemonList(params)\r\n                .then(result => {\r\n                    tempPokemon = result\r\n                    setPokemon(tempPokemon)\r\n                })\r\n            setPokemon(tempPokemon)\r\n        }\r\n        updatePokemon()\r\n    }, [region])\r\n\r\n    useEffect(() => {\r\n        if (pokemon.length > 0) {\r\n            setLoading(false)\r\n            updatedDisplayedPokemon()\r\n        }\r\n    }, [pokemon])\r\n\r\n    useEffect(() => {\r\n        let generationSelector = document.querySelector('#generationSelect')\r\n        const selected = generationSelector !== null ? generationSelector.value : undefined;\r\n        setRegion(selected)\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        updatedDisplayedPokemon()\r\n    }, [searchKeyword]);\r\n\r\n    const updatedDisplayedPokemon = () => {\r\n        setDisplayedPokemon([])\r\n\r\n        let display = []\r\n        setFilteredPokemon(searchKeyword.length > 0 ? pokemon.filter(onePokemon => onePokemon.name.includes(searchKeyword.toLowerCase())) : pokemon)\r\n        if (filteredPokemon.length > 0) {\r\n            for (let i = 0; i < filteredPokemon.length; i++) {\r\n                filteredPokemon.displayDetails = false\r\n                display.push(RenderPokemon(filteredPokemon[i]))\r\n            }\r\n        } else {\r\n            display.push(<Col><h3>No Results</h3></Col>)\r\n        }\r\n        setDisplayedPokemon(display)\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Row>\r\n                <Col>\r\n                    <Form onSubmit={e => e.preventDefault()}>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col}>\r\n                                <Form.Label >Search:</Form.Label>\r\n                                <Form.Control type=\"text\" id=\"searchBox\" onChange={event => setSearchKeyword(event.target.value)} />\r\n\r\n                            </Form.Group>\r\n                            {props.games === undefined ? <Form.Group as={Col} className=\"col-12 col-md-3\">\r\n                                <Form.Label>Select a generation/region</Form.Label>\r\n                                <Form.Control onChange={event => updateRegion(event)} as=\"select\" name=\"generations\" id=\"generationSelect\" defaultValue=\"Generation One - Kanto\">\r\n                                    <option>Generation One - Kanto</option>\r\n                                    <option>Generation Two - Johto</option>\r\n                                    <option>Generation Three - Hoenn</option>\r\n                                    <option>Generation Four - Sinnoh</option>\r\n                                    <option>Generation Five - Unova</option>\r\n                                    <option>Generation Six - Kalos</option>\r\n                                    <option>Generation Seven - Alola</option>\r\n                                    <option>Generation Eight - Galar</option>\r\n                                    <option>All Generations</option>\r\n                                </Form.Control>\r\n\r\n                            </Form.Group> : null}\r\n                        </Form.Row>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n            <Container>\r\n                <Row>\r\n                    {loading ? <Col>Loading...</Col> : displayedPokemon}\r\n                </Row>\r\n            </Container>\r\n        </Container >\r\n\r\n    )\r\n}\r\nexport default PokemonList\r\n","C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\details\\PokemonDetails.js",["66"],"\r\n// React imports\r\nimport React, { useState, useEffect } from 'react'\r\n\r\n//Library imports\r\nimport axios from 'axios'\r\n\r\n//React-Bootstrap imports\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Card from 'react-bootstrap/Card'\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\n\r\n// custom imports\r\nimport RenderMoves from './RenderMoves'\r\nimport RenderEvolution from './RenderEvolutions'\r\n\r\n\r\n//functional react component\r\nconst PokemonDetails = (props) => {\r\n\r\n    const [details, setDetails] = useState(props.details)\r\n    const number = details.id\r\n    console.log(details)\r\n    const getDetails = async (url) => {\r\n\r\n        let tempDetails = {}\r\n\r\n        await axios.get(url).then(response => {\r\n\r\n            tempDetails = response.data\r\n        }\r\n            , (error => {\r\n                console.log(error)\r\n            }))\r\n        await axios.get(tempDetails.species.url).then(response => {\r\n\r\n            tempDetails.species = response.data\r\n        }\r\n            , (error => {\r\n                console.log(error)\r\n            }))\r\n        setDetails(tempDetails)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (details === undefined) {\r\n            if (number) {\r\n                const url = `https://pokeapi.co/api/v2/pokemon/${number}`\r\n                getDetails(url)\r\n            }\r\n        }\r\n    }, [number, details]);\r\n\r\n\r\n    const RenderImages = () => {\r\n        let imageNames = [\"front_default\", \"back_default\", \"front_shiny\", \"back_shiny\", \"front_female\", \"back_female\", \"front_shiny_female\", \"back_shiny_female\"]\r\n        let images = []\r\n\r\n        imageNames.map(name => {\r\n\r\n            if (details.sprites !== undefined) {\r\n                if (details.sprites[name] !== null) {\r\n                    images.push(<Col className=\"col-12 col-md-3\"><Card.Img src={details.sprites[name]} /></Col>)\r\n                }\r\n            }\r\n            return 0\r\n        })\r\n\r\n        return images\r\n    }\r\n\r\n\r\n\r\n    console.log(details)\r\n\r\n    return (\r\n        <div>\r\n            <Card.Body>\r\n                {details.types !== undefined ? details.types.map(({ type }) => {\r\n                    return (\r\n                        <Col>\r\n                            <Card.Subtitle className=\"text-center\">{type.name.toUpperCase()}</Card.Subtitle>\r\n                        </Col>\r\n                    )\r\n                }) : null}\r\n                <RenderImages />\r\n            </Card.Body>\r\n            <Card.Body>\r\n                <Card.Subtitle className=\"text-center\">Evolution</Card.Subtitle><hr />\r\n                {details !== undefined ? <RenderEvolution evolutionChain={details.evolution_chain} /> : <Col>Loading</Col>}\r\n            </Card.Body>\r\n            <Card.Body>\r\n                <Card.Subtitle className=\"text-center\">Base Stats</Card.Subtitle>\r\n                <hr />\r\n                <ListGroup variant=\"flush\">\r\n                    {details.varieties[0].pokemon.stats !== undefined ? details.varieties[0].pokemon.stats.map((stat) => {\r\n                        return (\r\n                            <ListGroup.Item>\r\n                                <Container>\r\n                                    <Row>\r\n                                        <Col>{stat.stat.name}</Col>\r\n                                        <Col>{stat.base_stat}</Col>\r\n                                    </Row>\r\n                                </Container>\r\n                            </ListGroup.Item>)\r\n                    }) : null}\r\n                </ListGroup>\r\n            </Card.Body>\r\n            <Card.Body>\r\n                <Container fluid>\r\n                    <Row>\r\n                        <Col >\r\n                            <Card.Subtitle className=\"text-center\">Moves</Card.Subtitle>\r\n                        </Col>\r\n                    </Row>\r\n                    <hr />\r\n                    <Row>\r\n                        <Col>\r\n                            <ListGroup variant=\"flush\">\r\n                                <RenderMoves moves={details.varieties[0].pokemon.moves} />\r\n                            </ListGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n\r\n            </Card.Body>\r\n        </div >\r\n    )\r\n}\r\n\r\n// Evolution Chain -> images -> level -> links\r\n\r\nPokemonDetails.getInitialProps = async ({ query }) => {\r\n    const number = query.number\r\n    let details = {}\r\n    if (number) {\r\n        const url = 'https://pokeapi.co/api/v2/'\r\n        const pokemon = `pokemon/${number}`\r\n\r\n        await axios.get(url + pokemon).then(response => {\r\n\r\n            details = response.data\r\n        }\r\n            , (error => {\r\n                console.log(error)\r\n            }))\r\n        await axios.get(details.species.url).then(response => {\r\n\r\n            details.species = response.data\r\n        }\r\n            , (error => {\r\n                console.log(error)\r\n            }))\r\n        /**\r\n         * once evolution chain is loaded\r\n         * determine if pokemon evolves\r\n         * if pokemon evolves how many times does it evolve\r\n         * Make axios call for each evolution\r\n         */\r\n\r\n    }\r\n\r\n    return { details }\r\n}\r\n\r\nexport default PokemonDetails","C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\details\\RenderMoves.js",["67"],"C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\pokemon-list\\RenderMonster.js",[],"C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\details\\RenderEvolutions.js",["68"],"// React imports\r\nimport React, { useState, useEffect } from 'react'\r\n\r\n//Library imports\r\nimport axios from 'axios'\r\n\r\n//React-Bootstrap imports\r\nimport Card from 'react-bootstrap/Card'\r\n\r\nconst RenderEvolution = ({ evolutionChain }) => {\r\n    const [loading, setLoading] = useState(true)\r\n    const [evolutionList, setEvolutionList] = useState({})\r\n\r\n    const GetEvolutions = async () => {\r\n        await axios.get(evolutionChain.url).then(response => {\r\n            evolutionChain = { ...response.data }\r\n        })\r\n        await axios.get(evolutionChain.chain.species.url).then(response => {\r\n            evolutionChain.chain.species = { ...response.data }\r\n        })\r\n        await axios.get(`https://pokeapi.co/api/v2/pokemon/${evolutionChain.chain.species.id}`)\r\n            .then(response => {\r\n                evolutionChain.chain.species = { ...response.data }\r\n            })\r\n        for (let i = 0; i < evolutionChain.chain.evolves_to.length; i++) {\r\n\r\n            let evolves_to = evolutionChain.chain.evolves_to[i]\r\n            await axios.get(evolves_to.species.url).then(response => {\r\n                evolves_to.species = { ...response.data }\r\n            })\r\n            await axios.get(`https://pokeapi.co/api/v2/pokemon/${evolves_to.species.id}`)\r\n                .then(response => {\r\n                    evolves_to.species = { ...response.data }\r\n                })\r\n            for (let secondEvo = 0; secondEvo < evolves_to.evolves_to.length; secondEvo++) {\r\n\r\n                await axios.get(evolves_to.evolves_to[secondEvo].species.url).then(response => {\r\n                    evolves_to.evolves_to[secondEvo].species = { ...response.data }\r\n                })\r\n                await axios.get(`https://pokeapi.co/api/v2/pokemon/${evolves_to.evolves_to[secondEvo].species.id}`)\r\n                    .then(response => {\r\n                        evolves_to.evolves_to[secondEvo].species = { ...response.data }\r\n                    })\r\n            }\r\n\r\n            // Load all version groups then all versions\r\n        }\r\n\r\n        setEvolutionList(Object.assign(evolutionChain.chain, { isUpdated: true }))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (loading) {\r\n            GetEvolutions()\r\n        }\r\n        if (evolutionList.isUpdated) {\r\n            setLoading(false)\r\n        }\r\n    }, [evolutionList]);\r\n\r\n    let evolutions = []\r\n\r\n    if (!loading) {\r\n        let evolutionItems = () => {\r\n            let firstEvo = (\r\n                <Card>\r\n                    <Card.Header>\r\n                        <Card.Subtitle className=\"text-center text-uppercase\">\r\n                            {evolutionList.species.name}\r\n                        </Card.Subtitle>\r\n                    </Card.Header>\r\n                    <Card.Img src={evolutionList.species.sprites.front_default} />\r\n                    <Card.Body>\r\n                        <Card.Text className=\"text-center\">\r\n                            Level\r\n                            </Card.Text>\r\n                        <Card.Text className=\"text-center\">\r\n                            {evolutionList.evolves_to[0].evolution_details[0].min_level}\r\n                        </Card.Text>\r\n                    </Card.Body>\r\n                </Card>)\r\n\r\n            let secondEvo = []\r\n            let thirdEvo = []\r\n            for (let evo = 0; evo < evolutionList.evolves_to.length; evo++) {\r\n\r\n                const evolvesTo = evolutionList.evolves_to[evo]\r\n                console.log(evolvesTo)\r\n                secondEvo.push(\r\n                    <Card>\r\n                        <Card.Header>\r\n                            <Card.Subtitle className=\"text-center text-uppercase\">\r\n                                {evolvesTo.species.name}\r\n                            </Card.Subtitle>\r\n                        </Card.Header>\r\n                        <Card.Img src={evolvesTo.species.sprites.front_default} />\r\n                        <Card.Body>\r\n                            <Card.Text className=\"text-center\">\r\n                                Level\r\n                                </Card.Text>\r\n                            <Card.Text className=\"text-center\">\r\n                                {evolvesTo.evolves_to[0].evolution_details[0].min_level}\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n                    </Card>\r\n                )\r\n                for (let evoTwo = 0; evoTwo < evolvesTo.evolves_to.length; evoTwo++) {\r\n                    thirdEvo.push(\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Card.Subtitle className=\"text-center text-uppercase\">\r\n                                    {evolvesTo.evolves_to[evoTwo].species.name}\r\n                                </Card.Subtitle>\r\n                            </Card.Header>\r\n                            <Card.Img src={evolvesTo.evolves_to[evoTwo].species.sprites.front_default} />\r\n                            <Card.Body>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    )\r\n                }\r\n            }\r\n            let evoList = []\r\n            evoList.push(firstEvo)\r\n            evoList.push(secondEvo)\r\n            evoList.push(thirdEvo)\r\n\r\n\r\n            return evoList\r\n        }\r\n\r\n        evolutions = evolutionItems()\r\n    } else { evolutions = <Card.Title className=\"text-center\">Loading...</Card.Title> }\r\n\r\n    return evolutions\r\n\r\n}\r\n\r\nexport default RenderEvolution","C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\pokemon-list\\RenderPokemon.js",[],"C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\api\\GetPokemon.js",[],"C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\pokemon-list\\DisplayImages.js",[],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":41,"column":8,"nodeType":"75","endLine":41,"endColumn":10,"suggestions":"76"},{"ruleId":"77","severity":1,"message":"78","line":46,"column":84,"nodeType":"79","messageId":"80","endLine":46,"endColumn":86},{"ruleId":"73","severity":1,"message":"81","line":142,"column":8,"nodeType":"75","endLine":142,"endColumn":16,"suggestions":"82"},{"ruleId":"73","severity":1,"message":"83","line":149,"column":8,"nodeType":"75","endLine":149,"endColumn":17,"suggestions":"84"},{"ruleId":"73","severity":1,"message":"83","line":158,"column":8,"nodeType":"75","endLine":158,"endColumn":23,"suggestions":"85"},{"ruleId":"73","severity":1,"message":"86","line":52,"column":8,"nodeType":"75","endLine":52,"endColumn":16,"suggestions":"87"},{"ruleId":"88","severity":1,"message":"89","line":33,"column":87,"nodeType":"79","messageId":"90","endLine":35,"endColumn":14},{"ruleId":"73","severity":1,"message":"91","line":63,"column":8,"nodeType":"75","endLine":63,"endColumn":23,"suggestions":"92"},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.location.search'. Either include it or remove the dependency array.","ArrayExpression",["95"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'filterByRegion'. Either include it or remove the dependency array.",["96"],"React Hook useEffect has a missing dependency: 'updatedDisplayedPokemon'. Either include it or remove the dependency array.",["97"],["98"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.",["99"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'Versions'.","unsafeRefs","React Hook useEffect has missing dependencies: 'GetEvolutions' and 'loading'. Either include them or remove the dependency array.",["100"],"no-global-assign","no-unsafe-negation",{"desc":"101","fix":"102"},{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},{"desc":"107","fix":"108"},{"desc":"109","fix":"110"},{"desc":"111","fix":"112"},"Update the dependencies array to be: [props.location.search]",{"range":"113","text":"114"},"Update the dependencies array to be: [filterByRegion, region]",{"range":"115","text":"116"},"Update the dependencies array to be: [pokemon, updatedDisplayedPokemon]",{"range":"117","text":"118"},"Update the dependencies array to be: [searchKeyword, updatedDisplayedPokemon]",{"range":"119","text":"120"},"Update the dependencies array to be: [number, props]",{"range":"121","text":"122"},"Update the dependencies array to be: [GetEvolutions, evolutionList, loading]",{"range":"123","text":"124"},[1012,1014],"[props.location.search]",[3976,3984],"[filterByRegion, region]",[4131,4140],"[pokemon, updatedDisplayedPokemon]",[4354,4369],"[searchKeyword, updatedDisplayedPokemon]",[1407,1415],"[number, props]",[2499,2514],"[GetEvolutions, evolutionList, loading]"]