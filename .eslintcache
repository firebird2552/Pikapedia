[{"E:\\Pikapedia\\src\\index.js":"1","E:\\Pikapedia\\src\\App.js":"2","E:\\Pikapedia\\src\\reportWebVitals.js":"3","E:\\Pikapedia\\src\\components\\Header.jsx":"4","E:\\Pikapedia\\src\\components\\Content.jsx":"5","E:\\Pikapedia\\src\\components\\AdComponent.jsx":"6","E:\\Pikapedia\\src\\components\\Footer.jsx":"7","E:\\Pikapedia\\src\\components\\details\\PokemonDetails.jsx":"8","E:\\Pikapedia\\src\\components\\details\\moves\\MoveDetails.jsx":"9","E:\\Pikapedia\\src\\components\\details\\RenderMoves.jsx":"10","E:\\Pikapedia\\src\\components\\details\\RenderEvolutions.jsx":"11","E:\\Pikapedia\\src\\components\\legal.jsx":"12","E:\\Pikapedia\\src\\components\\pokemon-list\\PokemonList.jsx":"13","E:\\Pikapedia\\src\\data\\RetrievePokemon.js":"14","E:\\Pikapedia\\src\\components\\pokemon-list\\RenderMonster.jsx":"15","E:\\Pikapedia\\src\\components\\pokemon-list\\PokemonCard.jsx":"16","E:\\Pikapedia\\src\\components\\pokemon-list\\PokemonImage.jsx":"17","E:\\Pikapedia\\src\\components\\pokemon-list\\PokemonList.js":"18","E:\\Pikapedia\\src\\components\\pokemon-list\\RenderMonster.js":"19"},{"size":517,"mtime":1665707150000,"results":"20","hashOfConfig":"21"},{"size":360,"mtime":1665711654000,"results":"22","hashOfConfig":"21"},{"size":375,"mtime":1665707150000,"results":"23","hashOfConfig":"21"},{"size":541,"mtime":1665711654000,"results":"24","hashOfConfig":"21"},{"size":1082,"mtime":1665712850000,"results":"25","hashOfConfig":"21"},{"size":943,"mtime":1665711654000,"results":"26","hashOfConfig":"21"},{"size":406,"mtime":1665712894000,"results":"27","hashOfConfig":"21"},{"size":6149,"mtime":1665717616000,"results":"28","hashOfConfig":"21"},{"size":4195,"mtime":1665711654000,"results":"29","hashOfConfig":"21"},{"size":5156,"mtime":1665713936000,"results":"30","hashOfConfig":"21"},{"size":4760,"mtime":1665719634000,"results":"31","hashOfConfig":"21"},{"size":617,"mtime":1665712958000,"results":"32","hashOfConfig":"21"},{"size":4473,"mtime":1665711654000,"results":"33","hashOfConfig":"21"},{"size":3169,"mtime":1665711654000,"results":"34","hashOfConfig":"21"},{"size":858,"mtime":1665711654000,"results":"35","hashOfConfig":"21"},{"size":3915,"mtime":1665711654000,"results":"36","hashOfConfig":"21"},{"size":662,"mtime":1665711654000,"results":"37","hashOfConfig":"21"},{"size":6920,"mtime":1665715938000,"results":"38","hashOfConfig":"21"},{"size":7316,"mtime":1665715940000,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1ib0xps",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"E:\\Pikapedia\\src\\index.js",[],["83","84"],"E:\\Pikapedia\\src\\App.js",[],"E:\\Pikapedia\\src\\reportWebVitals.js",[],"E:\\Pikapedia\\src\\components\\Header.jsx",[],"E:\\Pikapedia\\src\\components\\Content.jsx",[],"E:\\Pikapedia\\src\\components\\AdComponent.jsx",[],"E:\\Pikapedia\\src\\components\\Footer.jsx",[],"E:\\Pikapedia\\src\\components\\details\\PokemonDetails.jsx",["85"],"// React imports\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\n//Library imports\r\nimport axios from \"axios\";\r\n\r\n//React-Bootstrap imports\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\n\r\n// custom imports\r\nimport RenderMoves from \"./RenderMoves\";\r\nimport RenderEvolution from \"./RenderEvolutions\";\r\n\r\nimport '../../styles/details.css'\r\n\r\n//functional react component\r\nconst PokemonDetails = (props) => {\r\n  const colors = {\r\n    // from https://www.epidemicjohto.com/t882-type-colors-hex-colors\r\n    normal: \"A8A77A\",\r\n    fire: \"EE8130\",\r\n    water: \"6390F0\",\r\n    electric: \"F7D02C\",\r\n    grass: \"7AC74C\",\r\n    ice: \"96D9D6\",\r\n    fighting: \"C22E28\",\r\n    poison: \"A33EA1\",\r\n    ground: \"E2BF65\",\r\n    flying: \"A98FF3\",\r\n    psychic: \"F95587\",\r\n    bug: \"A6B91A\",\r\n    rock: \"B6A136\",\r\n    ghost: \"735797\",\r\n    dragon: \"6F35FC\",\r\n    dark: \"705746\",\r\n    steel: \"B7B7CE\",\r\n    fairy: \"D685AD\",\r\n  };\r\n  const [details, setDetails] = useState({});\r\n  const number = props.location.search.slice(8);\r\n  const getDetails = async (url) => {\r\n    let tempDetails = {};\r\n\r\n    await axios.get(url).then(\r\n      (response) => {\r\n        tempDetails = response.data;\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    await axios.get(tempDetails.species.url).then(\r\n      (response) => {\r\n        tempDetails.species = response.data;\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    setDetails(tempDetails);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (number) {\r\n      const url = `https://pokeapi.co/api/v2/pokemon/${number}`;\r\n      getDetails(url);\r\n    }\r\n  }, [number]);\r\n\r\n  const RenderImages = () => {\r\n    let imageNames = [\r\n      \"front_default\",\r\n      \"back_default\",\r\n      \"front_shiny\",\r\n      \"back_shiny\",\r\n      \"front_female\",\r\n      \"back_female\",\r\n      \"front_shiny_female\",\r\n      \"back_shiny_female\",\r\n    ];\r\n    let images = [];\r\n\r\n    imageNames.map((name) => {\r\n      if (details.sprites !== undefined) {\r\n        if (details.sprites[name] !== null) {\r\n          images.push(\r\n            <Col className=\"col-12 col-md-3\">\r\n              <Card.Img src={details.sprites[name]} />\r\n            </Col>\r\n          );\r\n        }\r\n      }\r\n      return 0;\r\n    });\r\n\r\n    return images;\r\n  };\r\n\r\n  console.log(details);\r\n\r\n  return (\r\n    <Card>\r\n      <Card.Header>\r\n        <Container>\r\n          <Row>\r\n            <Col>\r\n              <Card.Title className=\"text-center\">\r\n                {details.name !== undefined ? details.name.toUpperCase() : null}\r\n              </Card.Title>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            {details.types !== undefined\r\n              ? details.types.map(({ type }) => {\r\n                  return (\r\n                    <Col>\r\n                      <Card.Subtitle className=\"text-center\">\r\n                        {type.name.toUpperCase()}\r\n                      </Card.Subtitle>\r\n                    </Col>\r\n                  );\r\n                })\r\n              : null}\r\n          </Row>\r\n        </Container>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Container>\r\n          <Row>{RenderImages()}</Row>\r\n              </Container>\r\n              <Container>\r\n                <Row>\r\n                    <Col>\r\n        <Card.Subtitle className=\"text-center title\">Evolution</Card.Subtitle>\r\n          </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n        <hr />\r\n        </Col>\r\n        </Row>\r\n        <Row>\r\n        {details.species !== undefined ? (\r\n            <Col>\r\n          <RenderEvolution evolutionChain={details.species.evolution_chain} />\r\n          </Col>\r\n        ) : (\r\n          <Col>Loading</Col>\r\n              )}\r\n              </Row>\r\n            <Row>\r\n                <Col>\r\n        <Card.Subtitle className=\"text-center title\">Base Stats</Card.Subtitle>\r\n        </Col>\r\n        </Row>\r\n        <Row>\r\n        <Col>\r\n        <hr />\r\n        </Col>\r\n        </Row>\r\n        <Row>\r\n            <Col>\r\n        <ListGroup variant=\"flush\" className=\"text-center\">\r\n          {details.stats !== undefined\r\n            ? details.stats.map((stat) => {\r\n                return (\r\n                  <ListGroup.Item>\r\n                    <Container>\r\n                      <Row>\r\n                        <Col>{stat.stat.name}</Col>\r\n                        <Col>{stat.base_stat}</Col>\r\n                      </Row>\r\n                    </Container>\r\n                  </ListGroup.Item>\r\n                );\r\n              })\r\n            : null}\r\n        </ListGroup>\r\n        </Col>\r\n        </Row>\r\n        </Container>\r\n        <Container fluid>\r\n          <Row>\r\n            <Col>\r\n              <Card.Subtitle className=\"text-center title\">Moves</Card.Subtitle>\r\n            </Col>\r\n          </Row>\r\n          <hr />\r\n          <Row>\r\n            <Col>\r\n              <ListGroup variant=\"flush\">\r\n                <RenderMoves moves={details.moves} />\r\n              </ListGroup>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\n// Evolution Chain -> images -> level -> links\r\n\r\nPokemonDetails.getInitialProps = async ({ query }) => {\r\n  const number = query.number;\r\n  let details = {};\r\n  if (number) {\r\n    const url = \"https://pokeapi.co/api/v2/\";\r\n    const pokemon = `pokemon/${number}`;\r\n\r\n    await axios.get(url + pokemon).then(\r\n      (response) => {\r\n        details = response.data;\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    await axios.get(details.species.url).then(\r\n      (response) => {\r\n        details.species = response.data;\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    /**\r\n     * once evolution chain is loaded\r\n     * determine if pokemon evolves\r\n     * if pokemon evolves how many times does it evolve\r\n     * Make axios call for each evolution\r\n     */\r\n  }\r\n\r\n  return { details };\r\n};\r\n\r\nexport default PokemonDetails;\r\n","E:\\Pikapedia\\src\\components\\details\\moves\\MoveDetails.jsx",["86","87"],"// React imports\r\nimport React, { useEffect, useState } from 'react'\r\n\r\n//Library imports\r\nimport axios from 'axios'\r\n\r\n//React-Bootstrap imports\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Card from 'react-bootstrap/Card'\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\n\r\n// custom imports\r\n\r\n//functional react component\r\nconst MoveDetails = (props) => {\r\n\r\n    console.log(props)\r\n    const [details, setDetails] = useState({})\r\n\r\n    const getDetails = async (url) => {\r\n        await axios.get(url).then(response => {\r\n\r\n            setDetails(response.data)\r\n        }\r\n            , (error => {\r\n                console.log(error)\r\n            }))\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        const number = props.location.search.slice(8)\r\n        if (number) {\r\n            const url = `https://pokeapi.co/api/v2/move/${number}`\r\n            console.log(url)\r\n            getDetails(url)\r\n        }\r\n\r\n    }, []);\r\n\r\n    const RenderDescriptions = () => {\r\n        let descriptions = []\r\n\r\n        details.flavor_text_entries.map(({ flavor_text, language, version_group }) => {\r\n            if (language.name === \"en\") {\r\n                descriptions.push(\r\n                    <ListGroup.Item key={details.version_group}>\r\n                        <Container>\r\n                            <Row>\r\n                                <Col className=\"col-12 col-md-4\">{version_group.name}</Col>\r\n                                <Col className=\"col-12 col-md-8\">{flavor_text}</Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </ListGroup.Item>\r\n                )\r\n            }\r\n\r\n        })\r\n\r\n        return descriptions\r\n    }\r\n\r\n    if (details.name !== undefined) {\r\n        details.name = details.name !== undefined ? details.name.replace('-', \" \") : undefined\r\n        return (\r\n            <Card>\r\n                <Card.Header>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col>\r\n                                <Card.Title className=\"text-center text-uppercase\">\r\n                                    {details.name}\r\n                                </Card.Title>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Card.Header>\r\n                <Card.Header className=\"text-center\">\r\n                    <Row>\r\n                        <Col>\r\n                            Damage Type\r\n                        </Col>\r\n                        <Col>\r\n                            Power\r\n                        </Col>\r\n                        <Col>PP</Col>\r\n                        <Col>Accuracy</Col>\r\n                    </Row>\r\n                    <hr />\r\n                    <Row>\r\n                        <Col>\r\n                            {details.damage_class.name} - {details.type.name}\r\n                        </Col>\r\n                        <Col>\r\n                            {details.power}\r\n                        </Col>\r\n                        <Col>\r\n                            {details.pp}\r\n                        </Col>\r\n                        <Col>\r\n                            {details.accuracy}\r\n                        </Col>\r\n                    </Row>\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <ListGroup variant=\"flush\">\r\n                        <ListGroup.Item >\r\n                            <Container>\r\n                                <Row>\r\n                                    <Col className=\"col-12 col-md-4\"><Card.Subtitle>Game</Card.Subtitle></Col>\r\n                                    <Col className=\"col-12 col-md-8\"><Card.Subtitle>Description</Card.Subtitle></Col>\r\n                                </Row>\r\n                            </Container>\r\n                        </ListGroup.Item>\r\n                        {RenderDescriptions()}\r\n                    </ListGroup>\r\n                </Card.Body>\r\n            </Card>\r\n\r\n        )\r\n    } else {\r\n        return <Col><Card.Title>Loading...</Card.Title></Col>\r\n    }\r\n}\r\n\r\nexport default MoveDetails","E:\\Pikapedia\\src\\components\\details\\RenderMoves.jsx",["88"],"//react imports\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nimport axios from \"axios\";\r\n\r\n// bootstrap imports\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport NavLink from \"react-bootstrap/NavLink\";\r\nimport Accordion from \"react-bootstrap/Accordion\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCaretSquareDown } from \"@fortawesome/free-regular-svg-icons\";\r\n\r\nconst RenderMoves = ({ moves }) => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [versionGroups, setVersionGroups] = useState([]);\r\n\r\n  const getVersions = async () => {\r\n    let Versions = [];\r\n    let versionDetails = [];\r\n    await axios\r\n      .get(\"https://pokeapi.co/api/v2/version-group/\")\r\n      .then((response) => {\r\n        const result = response.data.results;\r\n        Versions = result;\r\n      });\r\n\r\n    for (let i = 0; i < Versions.length; i++) {\r\n      await axios\r\n        .get(`https://pokeapi.co/api/v2/version-group/${i + 1}/`)\r\n        .then((response) => {\r\n          Versions[i] = response.data;\r\n        });\r\n    }\r\n\r\n    versionDetails = Versions;\r\n    setVersionGroups(versionDetails);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getVersions();\r\n    if (versionGroups.length > 0) {\r\n      setLoading(false);\r\n    }\r\n    return () => {};\r\n  }, [versionGroups]);\r\n\r\n  let moveElements = [];\r\n\r\n  if (!loading) {\r\n    moves != null ? (\r\n      moves.map(({ version_group_details, move }) => {\r\n        const moveUrl = move.url.split(\"/\");\r\n        const moveNumber = moveUrl[6];\r\n        let moveDetails = [];\r\n        moveDetails.push(\r\n          <ListGroup.Item key={moveNumber}>\r\n            <Container>\r\n              <Row>\r\n                <Col>\r\n                  {<Card.Subtitle className=\"text-center\">Game</Card.Subtitle>}\r\n                </Col>\r\n                <Col>\r\n                  {\r\n                    <Card.Subtitle className=\"text-center\">\r\n                      Method\r\n                    </Card.Subtitle>\r\n                  }\r\n                </Col>\r\n                <Col>\r\n                  {<Card.Subtitle className=\"text-center\">Level</Card.Subtitle>}\r\n                </Col>\r\n              </Row>\r\n            </Container>\r\n          </ListGroup.Item>\r\n        );\r\n        version_group_details.map((item) => {\r\n          const name = item.version_group.name;\r\n\r\n          // check if the version group name matches the name in the\r\n          const version = versionGroups.find((version) =>\r\n            version.name === name ? version : null\r\n          );\r\n          const gameLinks = version.versions.map((game) => {\r\n            /*const gameUrl = game.url.split('/')\r\n                    //const gameNumber = gameUrl[6]*/\r\n\r\n            let items = [];\r\n            items.push(<Col>{game.name}</Col>);\r\n\r\n            return items;\r\n          });\r\n          moveDetails.push(\r\n            <ListGroup.Item>\r\n              <Container fluid>\r\n                <Row>\r\n                  <Col className=\"text-center\">\r\n                    <Container>\r\n                      <Row>{gameLinks}</Row>\r\n                    </Container>\r\n                  </Col>\r\n                  <Col className=\"text-center\">\r\n                    {item.move_learn_method.name}\r\n                  </Col>\r\n                  <Col className=\"text-center\">{item.level_learned_at}</Col>\r\n                </Row>\r\n              </Container>\r\n            </ListGroup.Item>\r\n          );\r\n          return 0;\r\n        });\r\n        let tempArray = move.url.split(\"/\");\r\n        let number = tempArray[6];\r\n        moveElements.push(\r\n          <ListGroup.Item key={moveNumber}>\r\n            <Accordion>\r\n              <Card>\r\n                <Card.Header>\r\n                  <Container>\r\n                    <Row>\r\n                      <Col className=\"col-11 text-center\">\r\n                        <NavLink href={`/move/${move.name}?number=${number}`}>\r\n                          <Card.Title>{move.name}</Card.Title>\r\n                        </NavLink>\r\n                      </Col>\r\n                      <Col className=\"col-1\">\r\n                        <Accordion.Toggle as={Button} eventKey={moveNumber}>\r\n                          <FontAwesomeIcon icon={faCaretSquareDown} />\r\n                        </Accordion.Toggle>{\" \"}\r\n                      </Col>\r\n                    </Row>\r\n                  </Container>\r\n                </Card.Header>\r\n                <Accordion.Collapse eventKey={moveNumber}>\r\n                  <Card.Body>\r\n                    <ListGroup variant=\"flush\">{moveDetails}</ListGroup>\r\n                  </Card.Body>\r\n                </Accordion.Collapse>\r\n              </Card>\r\n            </Accordion>\r\n          </ListGroup.Item>\r\n        );\r\n        return 0;\r\n      })\r\n    ) : (\r\n      <div>Loading...</div>\r\n    );\r\n  } else {\r\n    moveElements.push(<Card.Title>Loading...</Card.Title>);\r\n  }\r\n\r\n  return moveElements;\r\n};\r\n\r\nexport default RenderMoves;\r\n","E:\\Pikapedia\\src\\components\\details\\RenderEvolutions.jsx",["89","90"],"E:\\Pikapedia\\src\\components\\legal.jsx",[],"E:\\Pikapedia\\src\\components\\pokemon-list\\PokemonList.jsx",["91","92"],"E:\\Pikapedia\\src\\data\\RetrievePokemon.js",[],"E:\\Pikapedia\\src\\components\\pokemon-list\\RenderMonster.jsx",[],"E:\\Pikapedia\\src\\components\\pokemon-list\\PokemonCard.jsx",[],"E:\\Pikapedia\\src\\components\\pokemon-list\\PokemonImage.jsx",[],"E:\\Pikapedia\\src\\components\\pokemon-list\\PokemonList.js",["93","94","95"],"// React imports\r\nimport React, { useState, useEffect } from 'react'\r\n\r\n//Library imports\r\nimport axios from 'axios'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Form from 'react-bootstrap/Form'\r\n\r\n// custom imports\r\nimport RenderMonster from './RenderMonster'\r\n\r\n//functional react component\r\nconst PokemonList = (props) => {\r\n\r\n\r\n    const [pokemon, setPokemon] = useState([])\r\n    const [searchKeyword, setSearchKeyword] = useState(\"\")\r\n    const [displayedPokemon, setDisplayedPokemon] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n    const [region, setRegion] = useState(\"\")\r\n\r\n    /**\r\n     * When the page loads for the first time -> Load the Kanto region pokemon -> display the pokemon once loaded\r\n     * \r\n     * Fix search bar\r\n     * change region to dropdown\r\n     * add back in type dropdowns\r\n     */\r\n\r\n\r\n\r\n\r\n    /* const filterPokemon = (pokemonList) => {\r\n\r\n        let tempPokemon = pokemonList.filter(monster => {\r\n            if (monster.name.includes(searchKeyword.toLowerCase()))\r\n                return monster\r\n        })\r\n        return tempPokemon\r\n    } */\r\n\r\n    const filterByRegion = () => {\r\n        let params = {\r\n            \"limit\": 151,\r\n            \"offset\": 0\r\n        }\r\n        switch (region) {\r\n            case \"Generation One - Kanto\":\r\n                params.limit = 151\r\n                params.offset = 0\r\n                break\r\n\r\n            case \"Generation Two - Johto\":\r\n                params.limit = 100\r\n                params.offset = 151\r\n                break\r\n\r\n            case \"Generation Three - Hoenn\":\r\n                params.limit = 134\r\n                params.offset = 251\r\n                break\r\n\r\n            case \"Generation Four - Sinnoh\":\r\n                params.limit = 107\r\n                params.offset = 386\r\n                break\r\n\r\n            case \"Generation Five - Unova\":\r\n                params.limit = 155\r\n                params.offset = 493\r\n                break\r\n\r\n            case \"Generation Six - Kalos\":\r\n                params.limit = 71\r\n                params.offset = 649\r\n                break\r\n\r\n            case \"Generation Seven - Alola\":\r\n                params.limit = 87\r\n                params.offset = 721\r\n                break\r\n\r\n            case \"Generation Eight - Galar\":\r\n                params.limit = 89\r\n                params.offset = 809\r\n                break\r\n\r\n            case \"All Generations\":\r\n                params.limit = 898\r\n                params.offset = 0\r\n                break\r\n            default:\r\n                params.limit = 151\r\n                params.offset = 0\r\n                break\r\n        }\r\n        return params\r\n\r\n    }\r\n\r\n    const updateRegion = (event) => {\r\n        const selected = event.target.value\r\n        setRegion(selected)\r\n\r\n    }\r\n\r\n    /*const filterByType = (event) => {\r\n        console.log(\"filterByType -> event -> target ->value: \", event.target.value)\r\n    }*/\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        setPokemon([])\r\n        setLoading(true)\r\n        let params = filterByRegion()\r\n        const updatePokemon = async () => {\r\n            let tempPokemon = []\r\n\r\n            await axios.get(`https://pokeapi.co/api/v2/pokemon/?offset=${params.offset}&limit=${params.limit}`).then(response => {\r\n                tempPokemon = response.data.results\r\n                setPokemon(tempPokemon)\r\n\r\n            }\r\n                , (error => {\r\n                    console.log(error)\r\n                }))\r\n            // for (let i = 0; i < tempPokemon.length; i++) {\r\n\r\n            //     await axios.get(tempPokemon[i].url).then(response => {\r\n\r\n            //         tempPokemon[i] = response.data\r\n            //     })\r\n            //     console.log(\"Pass Number: \" + i, \"Pokemon: \", tempPokemon)\r\n            // }\r\n\r\n            setPokemon(tempPokemon)\r\n        }\r\n        updatePokemon()\r\n    }, [region])\r\n\r\n    useEffect(() => {\r\n        if (pokemon.length > 0) {\r\n            setLoading(false)\r\n        }\r\n        updatedDisplayedPokemon()\r\n    }, [pokemon])\r\n\r\n    useEffect(() => {\r\n        const selected = document.querySelector('#generationSelect').value;\r\n        setRegion(selected)\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        updatedDisplayedPokemon()\r\n    }, [searchKeyword]);\r\n\r\n    const updatedDisplayedPokemon = () => {\r\n        setDisplayedPokemon([])\r\n\r\n        let tempPokemon = pokemon\r\n        if (searchKeyword.length > 0) {\r\n            tempPokemon = tempPokemon.filter(onePokemon => onePokemon.name.includes(searchKeyword))\r\n        }\r\n\r\n        let display = []\r\n\r\n        for (let i = 0; i < tempPokemon.length; i++) {\r\n            let url = tempPokemon[i].url.split('/')\r\n            let id = url[6]\r\n            display.push(<RenderMonster key={id} id={id} monster={tempPokemon[i]} />)\r\n        }\r\n        if (display.length === 0) {\r\n            display.push(<Col><h3>No Results</h3></Col>)\r\n        }\r\n        setDisplayedPokemon(display)\r\n    }\r\n\r\n    return (\r\n\r\n        <Container fluid>\r\n            <Row>\r\n                <Col>\r\n                    <Form>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col}>\r\n                                <Form.Label >Search:</Form.Label>\r\n                                <Form.Control type=\"text\" id=\"searchBox\" onChange={event => setSearchKeyword(event.target.value)} />\r\n\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} className=\"col-12 col-md-3\">\r\n                                <Form.Label>Select a generation/region</Form.Label>\r\n                                <Form.Control onChange={event => updateRegion(event)} as=\"select\" name=\"generations\" id=\"generationSelect\" defaultValue=\"Generation One - Kanto\">\r\n                                    <option>Generation One - Kanto</option>\r\n                                    <option>Generation Two - Johto</option>\r\n                                    <option>Generation Three - Hoenn</option>\r\n                                    <option>Generation Four - Sinnoh</option>\r\n                                    <option>Generation Five - Unova</option>\r\n                                    <option>Generation Six - Kalos</option>\r\n                                    <option>Generation Seven - Alola</option>\r\n                                    <option>Generation Eight - Galar</option>\r\n                                    <option>All Generations</option>\r\n                                </Form.Control>\r\n\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                {loading ? <Col>Loading...</Col> : displayedPokemon}\r\n            </Row>\r\n        </Container >\r\n\r\n    )\r\n}\r\nexport default PokemonList","E:\\Pikapedia\\src\\components\\pokemon-list\\RenderMonster.js",[],{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":22,"column":9,"nodeType":"102","messageId":"103","endLine":22,"endColumn":15},{"ruleId":"104","severity":1,"message":"105","line":41,"column":8,"nodeType":"106","endLine":41,"endColumn":10,"suggestions":"107"},{"ruleId":"108","severity":1,"message":"109","line":46,"column":84,"nodeType":"110","messageId":"111","endLine":46,"endColumn":86},{"ruleId":"112","severity":1,"message":"113","line":36,"column":15,"nodeType":"110","messageId":"114","endLine":38,"endColumn":10},{"ruleId":"100","severity":1,"message":"115","line":12,"column":8,"nodeType":"102","messageId":"103","endLine":12,"endColumn":17},{"ruleId":"104","severity":1,"message":"116","line":74,"column":6,"nodeType":"106","endLine":74,"endColumn":21,"suggestions":"117"},{"ruleId":"104","severity":1,"message":"118","line":74,"column":6,"nodeType":"106","endLine":74,"endColumn":15,"suggestions":"119"},{"ruleId":"104","severity":1,"message":"118","line":83,"column":6,"nodeType":"106","endLine":83,"endColumn":29,"suggestions":"120"},{"ruleId":"104","severity":1,"message":"121","line":142,"column":8,"nodeType":"106","endLine":142,"endColumn":16,"suggestions":"122"},{"ruleId":"104","severity":1,"message":"118","line":149,"column":8,"nodeType":"106","endLine":149,"endColumn":17,"suggestions":"123"},{"ruleId":"104","severity":1,"message":"118","line":158,"column":8,"nodeType":"106","endLine":158,"endColumn":23,"suggestions":"124"},"no-native-reassign",["125"],"no-negated-in-lhs",["126"],"no-unused-vars","'colors' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.location.search'. Either include it or remove the dependency array.","ArrayExpression",["127"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'Versions'.","unsafeRefs","'ListGroup' is defined but never used.","React Hook useEffect has missing dependencies: 'GetEvolutions' and 'loading'. Either include them or remove the dependency array.",["128"],"React Hook useEffect has a missing dependency: 'updatedDisplayedPokemon'. Either include it or remove the dependency array.",["129"],["130"],"React Hook useEffect has a missing dependency: 'filterByRegion'. Either include it or remove the dependency array.",["131"],["132"],["133"],"no-global-assign","no-unsafe-negation",{"desc":"134","fix":"135"},{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},{"desc":"138","fix":"144"},{"desc":"145","fix":"146"},"Update the dependencies array to be: [props.location.search]",{"range":"147","text":"148"},"Update the dependencies array to be: [GetEvolutions, evolutionList, loading]",{"range":"149","text":"150"},"Update the dependencies array to be: [pokemon, updatedDisplayedPokemon]",{"range":"151","text":"152"},"Update the dependencies array to be: [searchKeyword, region, updatedDisplayedPokemon]",{"range":"153","text":"154"},"Update the dependencies array to be: [filterByRegion, region]",{"range":"155","text":"156"},{"range":"157","text":"152"},"Update the dependencies array to be: [searchKeyword, updatedDisplayedPokemon]",{"range":"158","text":"159"},[1012,1014],"[props.location.search]",[2429,2444],"[GetEvolutions, evolutionList, loading]",[2273,2282],"[pokemon, updatedDisplayedPokemon]",[2479,2502],"[searchKeyword, region, updatedDisplayedPokemon]",[3976,3984],"[filterByRegion, region]",[4131,4140],[4354,4369],"[searchKeyword, updatedDisplayedPokemon]"]