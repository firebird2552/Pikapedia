[{"C:\\Users\\fireb\\Documents\\Programming\\websites\\github\\Pikapedia\\src\\index.js":"1","C:\\Users\\fireb\\Documents\\Programming\\websites\\github\\Pikapedia\\src\\App.js":"2","C:\\Users\\fireb\\Documents\\Programming\\websites\\github\\Pikapedia\\src\\reportWebVitals.js":"3","C:\\Users\\fireb\\Documents\\Programming\\websites\\github\\Pikapedia\\src\\components\\Header.js":"4","C:\\Users\\fireb\\Documents\\Programming\\websites\\github\\Pikapedia\\src\\components\\Content.js":"5","C:\\Users\\fireb\\Documents\\Programming\\websites\\github\\Pikapedia\\src\\components\\details\\moves\\MoveDetails.js":"6","C:\\Users\\fireb\\Documents\\Programming\\websites\\github\\Pikapedia\\src\\components\\details\\PokemonDetails.js":"7","C:\\Users\\fireb\\Documents\\Programming\\websites\\github\\Pikapedia\\src\\components\\details\\RenderMoves.js":"8","C:\\Users\\fireb\\Documents\\Programming\\websites\\github\\Pikapedia\\src\\components\\details\\RenderEvolutions.js":"9","C:\\Users\\fireb\\Documents\\Programming\\websites\\github\\Pikapedia\\src\\components\\AdComponent.jsx":"10","C:\\Users\\fireb\\Documents\\Programming\\websites\\github\\Pikapedia\\src\\data\\RetrievePokemon.js":"11","C:\\Users\\fireb\\Documents\\Programming\\websites\\github\\Pikapedia\\src\\components\\pokemon-list\\RenderOnePokemon.jsx":"12","C:\\Users\\fireb\\Documents\\Programming\\websites\\github\\Pikapedia\\src\\components\\Footer.jsx":"13","C:\\Users\\fireb\\Documents\\Programming\\websites\\github\\Pikapedia\\src\\components\\pokemon-list\\pokemonImage.jsx":"14","C:\\Users\\fireb\\Documents\\Programming\\websites\\github\\Pikapedia\\src\\components\\pokemon-list\\PokemonImage.jsx":"15","C:\\Users\\fireb\\Documents\\Programming\\websites\\github\\Pikapedia\\src\\components\\pokemon-list\\PokemonList.jsx":"16","C:\\Users\\fireb\\Documents\\Programming\\websites\\github\\Pikapedia\\src\\components\\pokemon-list\\RenderMonster.jsx":"17","C:\\Users\\fireb\\Documents\\Programming\\websites\\github\\Pikapedia\\src\\components\\pokemon-list\\PokemonCard.jsx":"18"},{"size":517,"mtime":1646534271669,"results":"19","hashOfConfig":"20"},{"size":360,"mtime":1646954710326,"results":"21","hashOfConfig":"20"},{"size":375,"mtime":1646534271673,"results":"22","hashOfConfig":"20"},{"size":541,"mtime":1647162973851,"results":"23","hashOfConfig":"20"},{"size":980,"mtime":1647202291328,"results":"24","hashOfConfig":"20"},{"size":4195,"mtime":1646534271668,"results":"25","hashOfConfig":"20"},{"size":5667,"mtime":1646534271666,"results":"26","hashOfConfig":"20"},{"size":5532,"mtime":1646534271666,"results":"27","hashOfConfig":"20"},{"size":6299,"mtime":1646534271666,"results":"28","hashOfConfig":"20"},{"size":943,"mtime":1647220529896,"results":"29","hashOfConfig":"20"},{"size":3169,"mtime":1647219513863,"results":"30","hashOfConfig":"20"},{"size":127,"mtime":1647158781437,"results":"31","hashOfConfig":"20"},{"size":769,"mtime":1647202077231,"results":"32","hashOfConfig":"20"},{"size":1077,"mtime":1647217716586,"results":"33","hashOfConfig":"20"},{"size":809,"mtime":1647219984079,"results":"34","hashOfConfig":"20"},{"size":4464,"mtime":1647219862192,"results":"35","hashOfConfig":"20"},{"size":866,"mtime":1647220134989,"results":"36","hashOfConfig":"20"},{"size":3598,"mtime":1647220464014,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"gw0565",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"40"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\fireb\\Documents\\Programming\\websites\\github\\Pikapedia\\src\\index.js",[],["84","85"],"C:\\Users\\fireb\\Documents\\Programming\\websites\\github\\Pikapedia\\src\\App.js",[],"C:\\Users\\fireb\\Documents\\Programming\\websites\\github\\Pikapedia\\src\\reportWebVitals.js",[],"C:\\Users\\fireb\\Documents\\Programming\\websites\\github\\Pikapedia\\src\\components\\Header.js",[],"C:\\Users\\fireb\\Documents\\Programming\\websites\\github\\Pikapedia\\src\\components\\Content.js",[],"C:\\Users\\fireb\\Documents\\Programming\\websites\\github\\Pikapedia\\src\\components\\details\\moves\\MoveDetails.js",["86","87"],"// React imports\r\nimport React, { useEffect, useState } from 'react'\r\n\r\n//Library imports\r\nimport axios from 'axios'\r\n\r\n//React-Bootstrap imports\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Card from 'react-bootstrap/Card'\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\n\r\n// custom imports\r\n\r\n//functional react component\r\nconst MoveDetails = (props) => {\r\n\r\n    console.log(props)\r\n    const [details, setDetails] = useState({})\r\n\r\n    const getDetails = async (url) => {\r\n        await axios.get(url).then(response => {\r\n\r\n            setDetails(response.data)\r\n        }\r\n            , (error => {\r\n                console.log(error)\r\n            }))\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        const number = props.location.search.slice(8)\r\n        if (number) {\r\n            const url = `https://pokeapi.co/api/v2/move/${number}`\r\n            console.log(url)\r\n            getDetails(url)\r\n        }\r\n\r\n    }, []);\r\n\r\n    const RenderDescriptions = () => {\r\n        let descriptions = []\r\n\r\n        details.flavor_text_entries.map(({ flavor_text, language, version_group }) => {\r\n            if (language.name === \"en\") {\r\n                descriptions.push(\r\n                    <ListGroup.Item key={details.version_group}>\r\n                        <Container>\r\n                            <Row>\r\n                                <Col className=\"col-12 col-md-4\">{version_group.name}</Col>\r\n                                <Col className=\"col-12 col-md-8\">{flavor_text}</Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </ListGroup.Item>\r\n                )\r\n            }\r\n\r\n        })\r\n\r\n        return descriptions\r\n    }\r\n\r\n    if (details.name !== undefined) {\r\n        details.name = details.name !== undefined ? details.name.replace('-', \" \") : undefined\r\n        return (\r\n            <Card>\r\n                <Card.Header>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col>\r\n                                <Card.Title className=\"text-center text-uppercase\">\r\n                                    {details.name}\r\n                                </Card.Title>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Card.Header>\r\n                <Card.Header className=\"text-center\">\r\n                    <Row>\r\n                        <Col>\r\n                            Damage Type\r\n                        </Col>\r\n                        <Col>\r\n                            Power\r\n                        </Col>\r\n                        <Col>PP</Col>\r\n                        <Col>Accuracy</Col>\r\n                    </Row>\r\n                    <hr />\r\n                    <Row>\r\n                        <Col>\r\n                            {details.damage_class.name} - {details.type.name}\r\n                        </Col>\r\n                        <Col>\r\n                            {details.power}\r\n                        </Col>\r\n                        <Col>\r\n                            {details.pp}\r\n                        </Col>\r\n                        <Col>\r\n                            {details.accuracy}\r\n                        </Col>\r\n                    </Row>\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <ListGroup variant=\"flush\">\r\n                        <ListGroup.Item >\r\n                            <Container>\r\n                                <Row>\r\n                                    <Col className=\"col-12 col-md-4\"><Card.Subtitle>Game</Card.Subtitle></Col>\r\n                                    <Col className=\"col-12 col-md-8\"><Card.Subtitle>Description</Card.Subtitle></Col>\r\n                                </Row>\r\n                            </Container>\r\n                        </ListGroup.Item>\r\n                        {RenderDescriptions()}\r\n                    </ListGroup>\r\n                </Card.Body>\r\n            </Card>\r\n\r\n        )\r\n    } else {\r\n        return <Col><Card.Title>Loading...</Card.Title></Col>\r\n    }\r\n}\r\n\r\nexport default MoveDetails","C:\\Users\\fireb\\Documents\\Programming\\websites\\github\\Pikapedia\\src\\components\\details\\PokemonDetails.js",["88"],"\r\n// React imports\r\nimport React, { useState, useEffect } from 'react'\r\n\r\n//Library imports\r\nimport axios from 'axios'\r\n\r\n//React-Bootstrap imports\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Card from 'react-bootstrap/Card'\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\n\r\n// custom imports\r\nimport RenderMoves from './RenderMoves'\r\nimport RenderEvolution from './RenderEvolutions'\r\n\r\n\r\n//functional react component\r\nconst PokemonDetails = (props) => {\r\n    const [details, setDetails] = useState({})\r\n    const number = props.location.search.slice(8)\r\n    const getDetails = async (url) => {\r\n\r\n        let tempDetails = {}\r\n\r\n        await axios.get(url).then(response => {\r\n\r\n            tempDetails = response.data\r\n        }\r\n            , (error => {\r\n                console.log(error)\r\n            }))\r\n        await axios.get(tempDetails.species.url).then(response => {\r\n\r\n            tempDetails.species = response.data\r\n        }\r\n            , (error => {\r\n                console.log(error)\r\n            }))\r\n        setDetails(tempDetails)\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log(\"props: \", props)\r\n        console.log(\"Number:\" + number)\r\n        if (number) {\r\n            const url = `https://pokeapi.co/api/v2/pokemon/${number}`\r\n            getDetails(url)\r\n        }\r\n    }, [number]);\r\n\r\n\r\n    const RenderImages = () => {\r\n        let imageNames = [\"front_default\", \"back_default\", \"front_shiny\", \"back_shiny\", \"front_female\", \"back_female\", \"front_shiny_female\", \"back_shiny_female\"]\r\n        let images = []\r\n\r\n        imageNames.map(name => {\r\n\r\n            if (details.sprites !== undefined) {\r\n                if (details.sprites[name] !== null) {\r\n                    images.push(<Col className=\"col-12 col-md-3\"><Card.Img src={details.sprites[name]} /></Col>)\r\n                }\r\n            }\r\n            return 0\r\n        })\r\n\r\n        return images\r\n    }\r\n\r\n\r\n\r\n    console.log(details)\r\n\r\n    return (\r\n        <>\r\n            <Card>\r\n                <Card.Header>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col>\r\n                                <Card.Title className=\"text-center\">\r\n                                    {details.name !== undefined ? details.name.toUpperCase() : null}\r\n                                </Card.Title>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            {details.types !== undefined ? details.types.map(({ type }) => {\r\n                                return (\r\n                                    <Col>\r\n                                        <Card.Subtitle className=\"text-center\">{type.name.toUpperCase()}</Card.Subtitle>\r\n                                    </Col>\r\n                                )\r\n                            }) : null}\r\n\r\n                        </Row>\r\n                    </Container>\r\n                </Card.Header>\r\n                <Container><Row>{RenderImages()}</Row></Container>\r\n                <Card.Body>\r\n                    <Card.Subtitle className=\"text-center\">Evolution</Card.Subtitle>\r\n                    <hr />{details.species !== undefined ? <RenderEvolution evolutionChain={details.species.evolution_chain} /> : <Col>Loading</Col>}\r\n                </Card.Body>\r\n                <Card.Body>\r\n                    <Card.Subtitle className=\"text-center\">Base Stats</Card.Subtitle>\r\n                    <hr />\r\n                    <ListGroup variant=\"flush\">\r\n                        {details.stats !== undefined ? details.stats.map((stat) => {\r\n                            return (<ListGroup.Item><Container><Row><Col>{stat.stat.name}</Col><Col>{stat.base_stat}</Col></Row></Container></ListGroup.Item>)\r\n                        }) : null}\r\n                    </ListGroup>\r\n                </Card.Body>\r\n                <Card.Body>\r\n                    <Container fluid>\r\n                        <Row>\r\n                            <Col >\r\n                                <Card.Subtitle className=\"text-center\">Moves</Card.Subtitle>\r\n                            </Col>\r\n                        </Row>\r\n                        <hr />\r\n                        <Row>\r\n                            <Col>\r\n                                <ListGroup variant=\"flush\">\r\n                                    <RenderMoves moves={details.moves} />\r\n                                </ListGroup>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n\r\n                </Card.Body>\r\n            </Card>\r\n        </>\r\n    )\r\n}\r\n\r\n// Evolution Chain -> images -> level -> links\r\n\r\nPokemonDetails.getInitialProps = async ({ query }) => {\r\n    const number = query.number\r\n    let details = {}\r\n    if (number) {\r\n        const url = 'https://pokeapi.co/api/v2/'\r\n        const pokemon = `pokemon/${number}`\r\n\r\n        await axios.get(url + pokemon).then(response => {\r\n\r\n            details = response.data\r\n        }\r\n            , (error => {\r\n                console.log(error)\r\n            }))\r\n        await axios.get(details.species.url).then(response => {\r\n\r\n            details.species = response.data\r\n        }\r\n            , (error => {\r\n                console.log(error)\r\n            }))\r\n        /**\r\n         * once evolution chain is loaded\r\n         * determine if pokemon evolves\r\n         * if pokemon evolves how many times does it evolve\r\n         * Make axios call for each evolution\r\n         */\r\n\r\n    }\r\n\r\n    return { details }\r\n}\r\n\r\nexport default PokemonDetails","C:\\Users\\fireb\\Documents\\Programming\\websites\\github\\Pikapedia\\src\\components\\details\\RenderMoves.js",["89"],"//react imports\r\nimport React, { useEffect, useState } from 'react'\r\n\r\nimport axios from 'axios'\r\n\r\n\r\n// bootstrap imports\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Card from 'react-bootstrap/Card'\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\nimport NavLink from 'react-bootstrap/NavLink'\r\nimport Accordion from 'react-bootstrap/Accordion'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCaretSquareDown } from '@fortawesome/free-regular-svg-icons'\r\n\r\nconst RenderMoves = ({ moves }) => {\r\n    const [loading, setLoading] = useState(true)\r\n    const [versionGroups, setVersionGroups] = useState([])\r\n\r\n    const getVersions = async () => {\r\n        let Versions = []\r\n        let versionDetails = []\r\n        await axios.get('https://pokeapi.co/api/v2/version-group/').then(response => {\r\n            const result = response.data.results\r\n            Versions = result\r\n        })\r\n\r\n        for (let i = 0; i < Versions.length; i++) {\r\n            await axios.get(`https://pokeapi.co/api/v2/version-group/${i + 1}/`).then(response => {\r\n                Versions[i] = response.data\r\n            })\r\n        }\r\n\r\n        versionDetails = Versions\r\n        setVersionGroups(versionDetails)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getVersions()\r\n        if (versionGroups.length > 0) {\r\n            setLoading(false)\r\n        }\r\n        return () => {\r\n        }\r\n    }, [versionGroups])\r\n\r\n    let moveElements = []\r\n\r\n\r\n\r\n    if (!loading) {\r\n\r\n        moves.map(({ version_group_details, move }) => {\r\n            const moveUrl = move.url.split('/')\r\n            const moveNumber = moveUrl[6]\r\n            let moveDetails = []\r\n            moveDetails.push(\r\n                <ListGroup.Item key={moveNumber}>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col>{<Card.Subtitle className=\"text-center\">Game</Card.Subtitle>}</Col>\r\n                            <Col>{<Card.Subtitle className=\"text-center\">Method</Card.Subtitle>}</Col>\r\n                            <Col>{<Card.Subtitle className=\"text-center\">Level</Card.Subtitle>}</Col>\r\n                        </Row>\r\n                    </Container>\r\n                </ListGroup.Item>)\r\n            version_group_details.map(item => {\r\n                const name = item.version_group.name\r\n\r\n                // check if the version group name matches the name in the \r\n                const version = versionGroups.find(version => version.name === name ? version : null)\r\n                const gameLinks = version.versions.map(game => {\r\n                    /*const gameUrl = game.url.split('/')\r\n                    //const gameNumber = gameUrl[6]*/\r\n\r\n                    let items = []\r\n                    items.push(\r\n                        <Col>\r\n                            {game.name}\r\n                        </Col>\r\n                    )\r\n\r\n                    return items\r\n                })\r\n                moveDetails.push(\r\n                    <ListGroup.Item>\r\n                        <Container fluid>\r\n                            <Row>\r\n                                <Col className=\"text-center\"><Container><Row>{gameLinks}</Row></Container></Col>\r\n                                <Col className=\"text-center\">{item.move_learn_method.name}</Col>\r\n                                <Col className=\"text-center\">{item.level_learned_at}</Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </ListGroup.Item>\r\n                )\r\n                return 0\r\n            })\r\n            let tempArray = move.url.split('/')\r\n            let number = tempArray[6]\r\n            moveElements.push(\r\n                <ListGroup.Item key={moveNumber}>\r\n                    <Accordion>\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Container>\r\n                                    <Row>\r\n                                        <Col className=\"col-11 text-center\">\r\n                                            <NavLink href={`/move/${move.name}?number=${number}`}>\r\n                                                <Card.Title>\r\n                                                    {move.name}\r\n                                                </Card.Title>\r\n                                            </NavLink>\r\n                                        </Col>\r\n                                        <Col className=\"col-1\">\r\n                                            <Accordion.Toggle as={Button} eventKey={moveNumber}><FontAwesomeIcon icon={faCaretSquareDown} /></Accordion.Toggle>                                        </Col>\r\n                                    </Row>\r\n                                </Container>\r\n                            </Card.Header>\r\n                            <Accordion.Collapse eventKey={moveNumber}>\r\n                                <Card.Body>\r\n                                    <ListGroup variant=\"flush\">{moveDetails}</ListGroup >\r\n                                </Card.Body>\r\n                            </Accordion.Collapse>\r\n                        </Card>\r\n                    </Accordion>\r\n                </ListGroup.Item >)\r\n            return 0\r\n        })\r\n\r\n    } else { moveElements.push(<Card.Title>Loading...</Card.Title>) }\r\n\r\n    return moveElements\r\n}\r\n\r\nexport default RenderMoves","C:\\Users\\fireb\\Documents\\Programming\\websites\\github\\Pikapedia\\src\\components\\details\\RenderEvolutions.js",["90"],"// React imports\r\nimport React, { useState, useEffect } from 'react'\r\n\r\n//Library imports\r\nimport axios from 'axios'\r\n\r\n//React-Bootstrap imports\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Card from 'react-bootstrap/Card'\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\n\r\nconst RenderEvolution = ({ evolutionChain }) => {\r\n    const [loading, setLoading] = useState(true)\r\n    const [evolutionList, setEvolutionList] = useState({})\r\n\r\n    const GetEvolutions = async () => {\r\n        await axios.get(evolutionChain.url).then(response => {\r\n            evolutionChain = { ...response.data }\r\n        })\r\n        await axios.get(evolutionChain.chain.species.url).then(response => {\r\n            evolutionChain.chain.species = { ...response.data }\r\n        })\r\n        await axios.get(`https://pokeapi.co/api/v2/pokemon/${evolutionChain.chain.species.id}`)\r\n            .then(response => {\r\n                evolutionChain.chain.species = { ...response.data }\r\n            })\r\n        for (let i = 0; i < evolutionChain.chain.evolves_to.length; i++) {\r\n\r\n            let evolves_to = evolutionChain.chain.evolves_to[i]\r\n            await axios.get(evolves_to.species.url).then(response => {\r\n                evolves_to.species = { ...response.data }\r\n            })\r\n            await axios.get(`https://pokeapi.co/api/v2/pokemon/${evolves_to.species.id}`)\r\n                .then(response => {\r\n                    evolves_to.species = { ...response.data }\r\n                })\r\n            for (let secondEvo = 0; secondEvo < evolves_to.evolves_to.length; secondEvo++) {\r\n\r\n                await axios.get(evolves_to.evolves_to[secondEvo].species.url).then(response => {\r\n                    evolves_to.evolves_to[secondEvo].species = { ...response.data }\r\n                })\r\n                await axios.get(`https://pokeapi.co/api/v2/pokemon/${evolves_to.evolves_to[secondEvo].species.id}`)\r\n                    .then(response => {\r\n                        evolves_to.evolves_to[secondEvo].species = { ...response.data }\r\n                    })\r\n            }\r\n\r\n            // Load all version groups then all versions\r\n        }\r\n\r\n        setEvolutionList(Object.assign(evolutionChain.chain, { isUpdated: true }))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (loading) {\r\n            GetEvolutions()\r\n        }\r\n        if (evolutionList.isUpdated) {\r\n            setLoading(false)\r\n        }\r\n    }, [evolutionList]);\r\n\r\n    let evolutions = []\r\n\r\n    if (!loading) {\r\n        let evolutionItems = () => {\r\n            let firstEvo = (\r\n                <Col className=\"col-12 col-md-2\">\r\n                    <Card>\r\n                        <Card.Header>\r\n                            <Card.Subtitle className=\"text-center text-uppercase\">\r\n                                {evolutionList.species.name}\r\n                            </Card.Subtitle>\r\n                        </Card.Header>\r\n                        <Card.Img src={evolutionList.species.sprites.front_default} />\r\n                        <Card.Body>\r\n                            <Card.Text className=\"text-center\">\r\n                                Level\r\n                            </Card.Text>\r\n                            <Card.Text>\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col >)\r\n\r\n            let secondEvo = []\r\n            let thirdEvo = []\r\n            for (let evo = 0; evo < evolutionList.evolves_to.length; evo++) {\r\n\r\n                const evolvesTo = evolutionList.evolves_to[evo]\r\n                secondEvo.push(\r\n                    <Col className=\"col-12 col-md-2\">\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Card.Subtitle className=\"text-center text-uppercase\">\r\n                                    {evolvesTo.species.name}\r\n                                </Card.Subtitle>\r\n                            </Card.Header>\r\n                            <Card.Img src={evolvesTo.species.sprites.front_default} />\r\n                            <Card.Body>\r\n                                <Card.Text className=\"text-center\">\r\n                                    Level\r\n                        </Card.Text>\r\n                                <Card.Text>\r\n                                </Card.Text>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col >\r\n                )\r\n                for (let evoTwo = 0; evoTwo < evolvesTo.evolves_to.length; evoTwo++) {\r\n                    thirdEvo.push(\r\n                        <Col className=\"col-12 col-md-2\">\r\n                            <Card>\r\n                                <Card.Header>\r\n                                    <Card.Subtitle className=\"text-center text-uppercase\">\r\n                                        {evolvesTo.evolves_to[evoTwo].species.name}\r\n                                    </Card.Subtitle>\r\n                                </Card.Header>\r\n                                <Card.Img src={evolvesTo.evolves_to[evoTwo].species.sprites.front_default} />\r\n                                <Card.Body>\r\n                                    <Card.Text className=\"text-center\">\r\n                                        Level\r\n                            </Card.Text>\r\n                                    <Card.Text>\r\n                                    </Card.Text>\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </Col >\r\n                    )\r\n                }\r\n            }\r\n            let evoList = (\r\n                <Container fluid>\r\n                    <Row className=\"justify-content-center\">\r\n                        {firstEvo}\r\n                        {secondEvo}\r\n\r\n                        {thirdEvo}\r\n                    </Row>\r\n                </Container>)\r\n\r\n\r\n            return evoList\r\n        }\r\n\r\n        evolutions.push(\r\n            <ListGroup.Item>\r\n                {evolutionItems()}\r\n            </ListGroup.Item>)\r\n    } else { evolutions.push(<Card.Title className=\"text-center\">Loading...</Card.Title>) }\r\n\r\n    return evolutions\r\n\r\n}\r\n\r\nexport default RenderEvolution","C:\\Users\\fireb\\Documents\\Programming\\websites\\github\\Pikapedia\\src\\components\\AdComponent.jsx",[],"C:\\Users\\fireb\\Documents\\Programming\\websites\\github\\Pikapedia\\src\\data\\RetrievePokemon.js",[],"C:\\Users\\fireb\\Documents\\Programming\\websites\\github\\Pikapedia\\src\\components\\pokemon-list\\RenderOnePokemon.jsx",[],["91","92"],"C:\\Users\\fireb\\Documents\\Programming\\websites\\github\\Pikapedia\\src\\components\\Footer.jsx",[],"C:\\Users\\fireb\\Documents\\Programming\\websites\\github\\Pikapedia\\src\\components\\pokemon-list\\pokemonImage.jsx",["93"],"import React, { useEffect, useState } from \"react\";\r\nimport { getImages } from \"../../data/RetrievePokemon\";\r\n\r\nexport const PokemonImage = (props) => {\r\n  const [imgLoaded, setImageLoaded] = useState(false);\r\n  const [url, setUrl] = useState(props.url);\r\n\r\n  useEffect(() => {\r\n    const loadImages = async () => {\r\n      await getImages(url);\r\n    };\r\n    loadImages();\r\n  }, [url]);\r\n\r\n  return (\r\n    <div>\r\n      <img\r\n        onLoad={(event) => {\r\n          setImageLoaded(true);\r\n        }}\r\n        src={url}\r\n        className={imgLoaded ? \"\" : \"d-none\"}\r\n        alt={`Default apperance for ${props.name}`}\r\n        loading=\"lazy\"\r\n      />\r\n      <div className={imgLoaded ? \"d-none\" : \"\"}>Loading...</div>\r\n    </div>\r\n  );\r\n};\r\n",["94","95"],"C:\\Users\\fireb\\Documents\\Programming\\websites\\github\\Pikapedia\\src\\components\\pokemon-list\\PokemonImage.jsx",["96","97","98"],"import React, { useEffect, useState } from \"react\";\r\n\r\nimport { getImages } from \"../../data/RetrievePokemon\";\r\n\r\nexport const PokemonImage = (props) => {\r\n  const [imgLoaded, setImageLoaded] = useState(false);\r\n  const [url, setUrl] = useState(props.url);\r\n  const [image, setImage] = useState(null);\r\n  let img = document.getElementById(url);\r\n\r\n\r\n  useEffect(() => {\r\n    setUrl(props.url);\r\n  }, [props]);\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <img\r\n          id={url}\r\n          onLoad={(event) => {\r\n            setImageLoaded(true);\r\n          }}\r\n          srcSet={url}\r\n          className={imgLoaded ? \"\" : \"d-none\"}\r\n          alt={`Default apperance for ${props.name}`}\r\n        />\r\n        <div className={imgLoaded ? \"d-none\" : \"\"}>Loading...</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\fireb\\Documents\\Programming\\websites\\github\\Pikapedia\\src\\components\\pokemon-list\\PokemonList.jsx",["99","100","101"],"// React imports\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\n//Library imports\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\n// custom imports\r\nimport { RenderMonster } from \"./RenderMonster\";\r\nimport { getPokemon, getPokemonData } from \"../../data/RetrievePokemon\";\r\n\r\n//functional react component\r\nconst PokemonList = () => {\r\n  const [pokemon, setPokemon] = useState({});\r\n  const [searchKeyword, setSearchKeyword] = useState(\"\");\r\n  const [displayedPokemon, setDisplayedPokemon] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [region, setRegion] = useState(\"Kanto\");\r\n\r\n  useEffect(() => {\r\n    getPokemon().then(async (response) => {\r\n      setPokemon(response);\r\n      let localPokemon = pokemon[\"Kanto\"];\r\n      for (let index in localPokemon) {\r\n        localPokemon[index] = await getPokemonData(localPokemon[index][\"url\"]);\r\n        pokemon[\"Kanto\"] = localPokemon;\r\n\r\n        // console.log(\"pokemon:\", localPokemon)\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  const updateRegion = (event) => {\r\n    const selected = event.target.value;\r\n    setRegion(selected);\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(pokemon).length !== 0) {\r\n      updatedDisplayedPokemon();\r\n      setLoading(false);\r\n    } else {\r\n      console.log(\r\n        `Pokemon not loaded\\n pokemon length ${Object.keys(pokemon).length}`\r\n      );\r\n    }\r\n  }, [pokemon]);\r\n\r\n  useEffect(() => {\r\n    const selected = document.querySelector(\"#generationSelect\").value;\r\n    setRegion(selected);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    updatedDisplayedPokemon();\r\n  }, [searchKeyword, region]);\r\n\r\n  const updatedDisplayedPokemon = () => {\r\n    if (searchKeyword.length !== 0) {\r\n      let temp = null;\r\n      for (let item in pokemon) {\r\n        //console.log(\"item\", item)\r\n        let found = pokemon[item].filter((monster) =>\r\n          monster[\"name\"].includes(searchKeyword.toLowerCase())\r\n        );\r\n        //console.log(\"found\", found)\r\n        if (temp === null) {\r\n          temp = found;\r\n        } else {\r\n          temp.concat(found);\r\n        }\r\n      }\r\n      //console.log(\"temp\", temp)\r\n      setDisplayedPokemon(temp);\r\n    } else if (region !== \"All Regions\") {\r\n      const selectedRegion = region.split(\": \")[0];\r\n      setDisplayedPokemon(pokemon[selectedRegion]);\r\n    } else {\r\n      setDisplayedPokemon(pokemon);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Row>\r\n        <Col>\r\n          <Form>\r\n            <Form.Row>\r\n              <Form.Group as={Col}>\r\n                <Form.Label>Search:</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  id=\"searchBox\"\r\n                  onChange={(event) => {\r\n                    setSearchKeyword(event.target.value);\r\n                  }}\r\n                />\r\n              </Form.Group>\r\n              <Form.Group as={Col} className=\"col-12 col-md-3\">\r\n                <Form.Label>Select a generation/region</Form.Label>\r\n                <Form.Control\r\n                  onChange={(event) => updateRegion(event)}\r\n                  as=\"select\"\r\n                  name=\"generations\"\r\n                  id=\"generationSelect\"\r\n                  defaultValue=\"Kanto: Generation One\"\r\n                >\r\n                  <option>Kanto: Generation One</option>\r\n                  <option>Johto: Generation Two</option>\r\n                  <option>Hoenn: Generation Three</option>\r\n                  <option>Sinnoh: Generation Four</option>\r\n                  <option>Unova: Generation Five</option>\r\n                  <option>Kalos: Generation Six </option>\r\n                  <option>Alola: Generation Seven</option>\r\n                  <option>Galar: Generation Eight</option>\r\n                  <option>All Generations</option>\r\n                </Form.Control>\r\n              </Form.Group>\r\n            </Form.Row>\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n      <div className=\"pokemonList\">\r\n        {/* <RenderOnePokemon pokemon={{ name: \"Fordorth\" }} /> */}\r\n        {loading ? (\r\n          <Col>Loading...</Col>\r\n        ) : (\r\n          displayedPokemon.map((pokemon, index) => {\r\n            //console.log(index)\r\n            return <RenderMonster key={index} monster={pokemon} />;\r\n          })\r\n        )}\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PokemonList;\r\n","C:\\Users\\fireb\\Documents\\Programming\\websites\\github\\Pikapedia\\src\\components\\pokemon-list\\RenderMonster.jsx",["102","103","104"],"C:\\Users\\fireb\\Documents\\Programming\\websites\\github\\Pikapedia\\src\\components\\pokemon-list\\PokemonCard.jsx",["105"],{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":41,"column":8,"nodeType":"112","endLine":41,"endColumn":10,"suggestions":"113"},{"ruleId":"114","severity":1,"message":"115","line":46,"column":84,"nodeType":"116","messageId":"117","endLine":46,"endColumn":86},{"ruleId":"110","severity":1,"message":"118","line":52,"column":8,"nodeType":"112","endLine":52,"endColumn":16,"suggestions":"119"},{"ruleId":"120","severity":1,"message":"121","line":33,"column":87,"nodeType":"116","messageId":"122","endLine":35,"endColumn":14},{"ruleId":"110","severity":1,"message":"123","line":63,"column":8,"nodeType":"112","endLine":63,"endColumn":23,"suggestions":"124"},{"ruleId":"106","replacedBy":"125"},{"ruleId":"108","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":6,"column":15,"nodeType":"129","messageId":"130","endLine":6,"endColumn":21},{"ruleId":"106","replacedBy":"131"},{"ruleId":"108","replacedBy":"132"},{"ruleId":"127","severity":1,"message":"133","line":3,"column":10,"nodeType":"129","messageId":"130","endLine":3,"endColumn":19},{"ruleId":"127","severity":1,"message":"134","line":8,"column":10,"nodeType":"129","messageId":"130","endLine":8,"endColumn":15},{"ruleId":"127","severity":1,"message":"135","line":8,"column":17,"nodeType":"129","messageId":"130","endLine":8,"endColumn":25},{"ruleId":"110","severity":1,"message":"136","line":33,"column":6,"nodeType":"112","endLine":33,"endColumn":8,"suggestions":"137"},{"ruleId":"110","severity":1,"message":"138","line":50,"column":6,"nodeType":"112","endLine":50,"endColumn":15,"suggestions":"139"},{"ruleId":"110","severity":1,"message":"138","line":59,"column":6,"nodeType":"112","endLine":59,"endColumn":29,"suggestions":"140"},{"ruleId":"127","severity":1,"message":"133","line":5,"column":10,"nodeType":"129","messageId":"130","endLine":5,"endColumn":19},{"ruleId":"127","severity":1,"message":"141","line":13,"column":11,"nodeType":"129","messageId":"130","endLine":13,"endColumn":13},{"ruleId":"110","severity":1,"message":"142","line":26,"column":6,"nodeType":"112","endLine":26,"endColumn":8,"suggestions":"143"},{"ruleId":"127","severity":1,"message":"144","line":1,"column":17,"nodeType":"129","messageId":"130","endLine":1,"endColumn":26},"no-native-reassign",["145"],"no-negated-in-lhs",["146"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.location.search'. Either include it or remove the dependency array.","ArrayExpression",["147"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.",["148"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'Versions'.","unsafeRefs","React Hook useEffect has missing dependencies: 'GetEvolutions' and 'loading'. Either include them or remove the dependency array.",["149"],["145"],["146"],"no-unused-vars","'setUrl' is assigned a value but never used.","Identifier","unusedVar",["145"],["146"],"'getImages' is defined but never used.","'image' is assigned a value but never used.","'setImage' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'pokemon'. Either include it or remove the dependency array.",["150"],"React Hook useEffect has a missing dependency: 'updatedDisplayedPokemon'. Either include it or remove the dependency array.",["151"],["152"],"'id' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'monster'. Either include it or remove the dependency array.",["153"],"'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},"Update the dependencies array to be: [props.location.search]",{"range":"168","text":"169"},"Update the dependencies array to be: [number, props]",{"range":"170","text":"171"},"Update the dependencies array to be: [GetEvolutions, evolutionList, loading]",{"range":"172","text":"173"},"Update the dependencies array to be: [pokemon]",{"range":"174","text":"175"},"Update the dependencies array to be: [pokemon, updatedDisplayedPokemon]",{"range":"176","text":"177"},"Update the dependencies array to be: [searchKeyword, region, updatedDisplayedPokemon]",{"range":"178","text":"179"},"Update the dependencies array to be: [monster]",{"range":"180","text":"181"},[1012,1014],"[props.location.search]",[1407,1415],"[number, props]",[2499,2514],"[GetEvolutions, evolutionList, loading]",[1122,1124],"[pokemon]",[1506,1515],"[pokemon, updatedDisplayedPokemon]",[1712,1735],"[searchKeyword, region, updatedDisplayedPokemon]",[721,723],"[monster]"]