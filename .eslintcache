[{"C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\index.js":"1","C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\reportWebVitals.js":"2","C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\App.js":"3","C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\components\\Header.js":"4","C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\components\\Content.js":"5","C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\components\\details\\PokemonDetails.js":"6","C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\components\\details\\moves\\MoveDetails.js":"7","C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\components\\pokemon-list\\PokemonList.js":"8","C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\components\\details\\RenderEvolutions.js":"9","C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\components\\details\\RenderMoves.js":"10","C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\components\\pokemon-list\\RenderMonster.js":"11","C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\components\\pokemon-list\\DisplayImages.js":"12"},{"size":500,"mtime":1611447413288,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1611447413288,"results":"15","hashOfConfig":"14"},{"size":360,"mtime":1611449691511,"results":"16","hashOfConfig":"14"},{"size":767,"mtime":1612991050601,"results":"17","hashOfConfig":"14"},{"size":781,"mtime":1612990345169,"results":"18","hashOfConfig":"14"},{"size":5293,"mtime":1613010738524,"results":"19","hashOfConfig":"14"},{"size":4195,"mtime":1611457142402,"results":"20","hashOfConfig":"14"},{"size":5911,"mtime":1613008642112,"results":"21","hashOfConfig":"14"},{"size":5664,"mtime":1613010529281,"results":"22","hashOfConfig":"14"},{"size":5532,"mtime":1611688739851,"results":"23","hashOfConfig":"14"},{"size":6489,"mtime":1613008898029,"results":"24","hashOfConfig":"14"},{"size":2642,"mtime":1613004102269,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"iq4tbi",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\index.js",[],["55","56"],"C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\reportWebVitals.js",[],"C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\App.js",[],"C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\components\\Header.js",[],"C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\components\\Content.js",[],"C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\components\\details\\PokemonDetails.js",["57","58","59"],"\r\n// React imports\r\nimport React, { useState, useEffect } from 'react'\r\n\r\n//Library imports\r\nimport axios from 'axios'\r\n\r\n//React-Bootstrap imports\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Card from 'react-bootstrap/Card'\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\n\r\n// custom imports\r\nimport RenderMoves from './RenderMoves'\r\nimport RenderEvolution from './RenderEvolutions'\r\nimport { CardColumns, CardGroup } from 'react-bootstrap'\r\n\r\n\r\n//functional react component\r\nconst PokemonDetails = (props) => {\r\n    const [details, setDetails] = useState(props.details)\r\n    const number = details.id\r\n    console.log(details)\r\n    const getDetails = async (url) => {\r\n\r\n        let tempDetails = {}\r\n\r\n        await axios.get(url).then(response => {\r\n\r\n            tempDetails = response.data\r\n        }\r\n            , (error => {\r\n                console.log(error)\r\n            }))\r\n        await axios.get(tempDetails.species.url).then(response => {\r\n\r\n            tempDetails.species = response.data\r\n        }\r\n            , (error => {\r\n                console.log(error)\r\n            }))\r\n        setDetails(tempDetails)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (details === undefined) {\r\n            if (number) {\r\n                const url = `https://pokeapi.co/api/v2/pokemon/${number}`\r\n                getDetails(url)\r\n            }\r\n        }\r\n    }, [number]);\r\n\r\n\r\n    const RenderImages = () => {\r\n        let imageNames = [\"front_default\", \"back_default\", \"front_shiny\", \"back_shiny\", \"front_female\", \"back_female\", \"front_shiny_female\", \"back_shiny_female\"]\r\n        let images = []\r\n\r\n        imageNames.map(name => {\r\n\r\n            if (details.sprites !== undefined) {\r\n                if (details.sprites[name] !== null) {\r\n                    images.push(<Col className=\"col-12 col-md-3\"><Card.Img src={details.sprites[name]} /></Col>)\r\n                }\r\n            }\r\n            return 0\r\n        })\r\n\r\n        return images\r\n    }\r\n\r\n\r\n\r\n    console.log(details)\r\n\r\n    return (\r\n        <div>\r\n            <Card.Body>\r\n                {details.types !== undefined ? details.types.map(({ type }) => {\r\n                    return (\r\n                        <Col>\r\n                            <Card.Subtitle className=\"text-center\">{type.name.toUpperCase()}</Card.Subtitle>\r\n                        </Col>\r\n                    )\r\n                }) : null}\r\n                <RenderImages />\r\n            </Card.Body>\r\n            <Card.Body>\r\n                <Card.Subtitle className=\"text-center\">Evolution</Card.Subtitle><hr />\r\n                {details !== undefined ? <RenderEvolution evolutionChain={details.evolution_chain} /> : <Col>Loading</Col>}\r\n            </Card.Body>\r\n            <Card.Body>\r\n                <Card.Subtitle className=\"text-center\">Base Stats</Card.Subtitle>\r\n                <hr />\r\n                <ListGroup variant=\"flush\">\r\n                    {details.varieties[0].pokemon.stats !== undefined ? details.varieties[0].pokemon.stats.map((stat) => {\r\n                        return (\r\n                            <ListGroup.Item>\r\n                                <Container>\r\n                                    <Row>\r\n                                        <Col>{stat.stat.name}</Col>\r\n                                        <Col>{stat.base_stat}</Col>\r\n                                    </Row>\r\n                                </Container>\r\n                            </ListGroup.Item>)\r\n                    }) : null}\r\n                </ListGroup>\r\n            </Card.Body>\r\n            <Card.Body>\r\n                <Container fluid>\r\n                    <Row>\r\n                        <Col >\r\n                            <Card.Subtitle className=\"text-center\">Moves</Card.Subtitle>\r\n                        </Col>\r\n                    </Row>\r\n                    <hr />\r\n                    <Row>\r\n                        <Col>\r\n                            <ListGroup variant=\"flush\">\r\n                                <RenderMoves moves={details.varieties[0].pokemon.moves} />\r\n                            </ListGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n\r\n            </Card.Body>\r\n        </div >\r\n    )\r\n}\r\n\r\n// Evolution Chain -> images -> level -> links\r\n\r\nPokemonDetails.getInitialProps = async ({ query }) => {\r\n    const number = query.number\r\n    let details = {}\r\n    if (number) {\r\n        const url = 'https://pokeapi.co/api/v2/'\r\n        const pokemon = `pokemon/${number}`\r\n\r\n        await axios.get(url + pokemon).then(response => {\r\n\r\n            details = response.data\r\n        }\r\n            , (error => {\r\n                console.log(error)\r\n            }))\r\n        await axios.get(details.species.url).then(response => {\r\n\r\n            details.species = response.data\r\n        }\r\n            , (error => {\r\n                console.log(error)\r\n            }))\r\n        /**\r\n         * once evolution chain is loaded\r\n         * determine if pokemon evolves\r\n         * if pokemon evolves how many times does it evolve\r\n         * Make axios call for each evolution\r\n         */\r\n\r\n    }\r\n\r\n    return { details }\r\n}\r\n\r\nexport default PokemonDetails","C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\components\\details\\moves\\MoveDetails.js",["60","61"],"// React imports\r\nimport React, { useEffect, useState } from 'react'\r\n\r\n//Library imports\r\nimport axios from 'axios'\r\n\r\n//React-Bootstrap imports\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Card from 'react-bootstrap/Card'\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\n\r\n// custom imports\r\n\r\n//functional react component\r\nconst MoveDetails = (props) => {\r\n\r\n    console.log(props)\r\n    const [details, setDetails] = useState({})\r\n\r\n    const getDetails = async (url) => {\r\n        await axios.get(url).then(response => {\r\n\r\n            setDetails(response.data)\r\n        }\r\n            , (error => {\r\n                console.log(error)\r\n            }))\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        const number = props.location.search.slice(8)\r\n        if (number) {\r\n            const url = `https://pokeapi.co/api/v2/move/${number}`\r\n            console.log(url)\r\n            getDetails(url)\r\n        }\r\n\r\n    }, []);\r\n\r\n    const RenderDescriptions = () => {\r\n        let descriptions = []\r\n\r\n        details.flavor_text_entries.map(({ flavor_text, language, version_group }) => {\r\n            if (language.name === \"en\") {\r\n                descriptions.push(\r\n                    <ListGroup.Item key={details.version_group}>\r\n                        <Container>\r\n                            <Row>\r\n                                <Col className=\"col-12 col-md-4\">{version_group.name}</Col>\r\n                                <Col className=\"col-12 col-md-8\">{flavor_text}</Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </ListGroup.Item>\r\n                )\r\n            }\r\n\r\n        })\r\n\r\n        return descriptions\r\n    }\r\n\r\n    if (details.name !== undefined) {\r\n        details.name = details.name !== undefined ? details.name.replace('-', \" \") : undefined\r\n        return (\r\n            <Card>\r\n                <Card.Header>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col>\r\n                                <Card.Title className=\"text-center text-uppercase\">\r\n                                    {details.name}\r\n                                </Card.Title>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Card.Header>\r\n                <Card.Header className=\"text-center\">\r\n                    <Row>\r\n                        <Col>\r\n                            Damage Type\r\n                        </Col>\r\n                        <Col>\r\n                            Power\r\n                        </Col>\r\n                        <Col>PP</Col>\r\n                        <Col>Accuracy</Col>\r\n                    </Row>\r\n                    <hr />\r\n                    <Row>\r\n                        <Col>\r\n                            {details.damage_class.name} - {details.type.name}\r\n                        </Col>\r\n                        <Col>\r\n                            {details.power}\r\n                        </Col>\r\n                        <Col>\r\n                            {details.pp}\r\n                        </Col>\r\n                        <Col>\r\n                            {details.accuracy}\r\n                        </Col>\r\n                    </Row>\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <ListGroup variant=\"flush\">\r\n                        <ListGroup.Item >\r\n                            <Container>\r\n                                <Row>\r\n                                    <Col className=\"col-12 col-md-4\"><Card.Subtitle>Game</Card.Subtitle></Col>\r\n                                    <Col className=\"col-12 col-md-8\"><Card.Subtitle>Description</Card.Subtitle></Col>\r\n                                </Row>\r\n                            </Container>\r\n                        </ListGroup.Item>\r\n                        {RenderDescriptions()}\r\n                    </ListGroup>\r\n                </Card.Body>\r\n            </Card>\r\n\r\n        )\r\n    } else {\r\n        return <Col><Card.Title>Loading...</Card.Title></Col>\r\n    }\r\n}\r\n\r\nexport default MoveDetails","C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\components\\pokemon-list\\PokemonList.js",["62","63","64","65"],"C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\components\\details\\RenderEvolutions.js",["66","67","68","69","70"],"C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\components\\details\\RenderMoves.js",["71"],"//react imports\r\nimport React, { useEffect, useState } from 'react'\r\n\r\nimport axios from 'axios'\r\n\r\n\r\n// bootstrap imports\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Card from 'react-bootstrap/Card'\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\nimport NavLink from 'react-bootstrap/NavLink'\r\nimport Accordion from 'react-bootstrap/Accordion'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCaretSquareDown } from '@fortawesome/free-regular-svg-icons'\r\n\r\nconst RenderMoves = ({ moves }) => {\r\n    const [loading, setLoading] = useState(true)\r\n    const [versionGroups, setVersionGroups] = useState([])\r\n\r\n    const getVersions = async () => {\r\n        let Versions = []\r\n        let versionDetails = []\r\n        await axios.get('https://pokeapi.co/api/v2/version-group/').then(response => {\r\n            const result = response.data.results\r\n            Versions = result\r\n        })\r\n\r\n        for (let i = 0; i < Versions.length; i++) {\r\n            await axios.get(`https://pokeapi.co/api/v2/version-group/${i + 1}/`).then(response => {\r\n                Versions[i] = response.data\r\n            })\r\n        }\r\n\r\n        versionDetails = Versions\r\n        setVersionGroups(versionDetails)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getVersions()\r\n        if (versionGroups.length > 0) {\r\n            setLoading(false)\r\n        }\r\n        return () => {\r\n        }\r\n    }, [versionGroups])\r\n\r\n    let moveElements = []\r\n\r\n\r\n\r\n    if (!loading) {\r\n\r\n        moves.map(({ version_group_details, move }) => {\r\n            const moveUrl = move.url.split('/')\r\n            const moveNumber = moveUrl[6]\r\n            let moveDetails = []\r\n            moveDetails.push(\r\n                <ListGroup.Item key={moveNumber}>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col>{<Card.Subtitle className=\"text-center\">Game</Card.Subtitle>}</Col>\r\n                            <Col>{<Card.Subtitle className=\"text-center\">Method</Card.Subtitle>}</Col>\r\n                            <Col>{<Card.Subtitle className=\"text-center\">Level</Card.Subtitle>}</Col>\r\n                        </Row>\r\n                    </Container>\r\n                </ListGroup.Item>)\r\n            version_group_details.map(item => {\r\n                const name = item.version_group.name\r\n\r\n                // check if the version group name matches the name in the \r\n                const version = versionGroups.find(version => version.name === name ? version : null)\r\n                const gameLinks = version.versions.map(game => {\r\n                    /*const gameUrl = game.url.split('/')\r\n                    //const gameNumber = gameUrl[6]*/\r\n\r\n                    let items = []\r\n                    items.push(\r\n                        <Col>\r\n                            {game.name}\r\n                        </Col>\r\n                    )\r\n\r\n                    return items\r\n                })\r\n                moveDetails.push(\r\n                    <ListGroup.Item>\r\n                        <Container fluid>\r\n                            <Row>\r\n                                <Col className=\"text-center\"><Container><Row>{gameLinks}</Row></Container></Col>\r\n                                <Col className=\"text-center\">{item.move_learn_method.name}</Col>\r\n                                <Col className=\"text-center\">{item.level_learned_at}</Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </ListGroup.Item>\r\n                )\r\n                return 0\r\n            })\r\n            let tempArray = move.url.split('/')\r\n            let number = tempArray[6]\r\n            moveElements.push(\r\n                <ListGroup.Item key={moveNumber}>\r\n                    <Accordion>\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Container>\r\n                                    <Row>\r\n                                        <Col className=\"col-11 text-center\">\r\n                                            <NavLink href={`/move/${move.name}?number=${number}`}>\r\n                                                <Card.Title>\r\n                                                    {move.name}\r\n                                                </Card.Title>\r\n                                            </NavLink>\r\n                                        </Col>\r\n                                        <Col className=\"col-1\">\r\n                                            <Accordion.Toggle as={Button} eventKey={moveNumber}><FontAwesomeIcon icon={faCaretSquareDown} /></Accordion.Toggle>                                        </Col>\r\n                                    </Row>\r\n                                </Container>\r\n                            </Card.Header>\r\n                            <Accordion.Collapse eventKey={moveNumber}>\r\n                                <Card.Body>\r\n                                    <ListGroup variant=\"flush\">{moveDetails}</ListGroup >\r\n                                </Card.Body>\r\n                            </Accordion.Collapse>\r\n                        </Card>\r\n                    </Accordion>\r\n                </ListGroup.Item >)\r\n            return 0\r\n        })\r\n\r\n    } else { moveElements.push(<Card.Title>Loading...</Card.Title>) }\r\n\r\n    return moveElements\r\n}\r\n\r\nexport default RenderMoves","C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\components\\pokemon-list\\RenderMonster.js",["72"],"// React imports\r\nimport React, { useState, useEffect } from 'react'\r\nimport NavLink from 'react-bootstrap/NavLink'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\n\r\n//Library imports\r\nimport Card from 'react-bootstrap/Card'\r\nimport axios from 'axios'\r\nimport DisplayImages from './DisplayImages'\r\nimport PokemonDetails from '../details/PokemonDetails'\r\n\r\n// custom imports\r\n\r\n//functional react component\r\nconst RenderMonster = ({ id, monster, details = false }) => {\r\n    const [monsterDetails, setMonsterDetails] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n    const [displayDetails, setDisplayDetails] = useState(details)\r\n\r\n\r\n    const GetDetails = async () => {\r\n        let details = {}\r\n        await axios.get(monster.url).then(response => {\r\n            details = response.data\r\n            axios.get(details.varieties[0].pokemon.url).then(response => {\r\n                details.varieties[0].pokemon = response.data\r\n                setLoading(false)\r\n\r\n                setMonsterDetails(details)\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        GetDetails()\r\n        return () => {\r\n        }\r\n    }, [])\r\n    const colors = {\r\n        // from https://www.epidemicjohto.com/t882-type-colors-hex-colors\r\n        \"normal\": \"A8A77A\",\r\n        \"fire\": \"EE8130\",\r\n        \"water\": \"6390F0\",\r\n        \"electric\": \"F7D02C\",\r\n        \"grass\": \"7AC74C\",\r\n        \"ice\": \"96D9D6\",\r\n        \"fighting\": \"C22E28\",\r\n        \"poison\": \"A33EA1\",\r\n        \"ground\": \"E2BF65\",\r\n        \"flying\": \"A98FF3\",\r\n        \"psychic\": \"F95587\",\r\n        \"bug\": \"A6B91A\",\r\n        \"rock\": \"B6A136\",\r\n        \"ghost\": \"735797\",\r\n        \"dragon\": \"6F35FC\",\r\n        \"dark\": \"705746\",\r\n        \"steel\": \"B7B7CE\",\r\n        \"fairy\": \"D685AD\",\r\n    }\r\n\r\n    const cardStyle = () => {\r\n        const types = monsterDetails.varieties !== undefined ? monsterDetails.varieties[0].pokemon.types.map(type => type.type.name) : []\r\n\r\n        let style\r\n        if (types.length > 1) {\r\n            style = { background: `linear-gradient(to right, #${colors[types[0]]}, #${colors[types[1]]}` }\r\n        }\r\n        else if (types.length === 1) {\r\n            style = {\r\n                background: `#${colors[types[0]]}`\r\n            }\r\n        }\r\n        return style\r\n    }\r\n\r\n    const toggleDisplay = (event) => {\r\n        console.log(event)\r\n        setDisplayDetails(!displayDetails)\r\n    }\r\n\r\n    const RenderPokemonCard = () => {\r\n        if (!loading) {\r\n            if (displayDetails) {\r\n                return (\r\n                    <div>\r\n                        <NavLink onClick={event => toggleDisplay(event)}>\r\n                            <Card>\r\n                                <Card.Header style={cardStyle()}>\r\n                                    <Card.Title className=\"text-center text-white\">\r\n                                        #{id} {monster.name.toUpperCase()}\r\n                                    </Card.Title>\r\n                                    <Container>\r\n                                        <Row>{monsterDetails.varieties !== undefined ? monsterDetails.varieties[0].pokemon.types !== undefined ? monsterDetails.varieties[0].pokemon.types.map(type => {\r\n                                            return (\r\n                                                <Col>\r\n                                                    <Card.Subtitle className=\" text-white text-center\">\r\n                                                        {type.type.name}\r\n                                                    </Card.Subtitle>\r\n                                                </Col>)\r\n                                        }) : null : null}\r\n                                        </Row>\r\n                                    </Container>\r\n                                </Card.Header>\r\n                                <Card.Body>\r\n                                    {!loading ?\r\n                                        monsterDetails.varieties !== undefined ?\r\n                                            <DisplayImages monsterDetails={monsterDetails} />\r\n                                            : null\r\n                                        : <Card.Text className=\"text-center\">Loading...</Card.Text>}\r\n                                </Card.Body>\r\n                                <PokemonDetails details={monsterDetails} />\r\n\r\n                            </Card>\r\n\r\n                        </NavLink>\r\n                    </div>\r\n                )\r\n            } else {\r\n                return (\r\n                    <NavLink onClick={event => toggleDisplay(event)}>\r\n                        <Card>\r\n                            <Card.Header style={cardStyle()}>\r\n                                <Card.Title className=\"text-center text-white\">\r\n                                    #{id} {monster.name.toUpperCase()}\r\n                                </Card.Title>\r\n                                <Container>\r\n                                    <Row>{monsterDetails.varieties !== undefined ? monsterDetails.varieties[0].pokemon.types !== undefined ? monsterDetails.varieties[0].pokemon.types.map(type => {\r\n                                        return (\r\n                                            <Col>\r\n                                                <Card.Subtitle className=\" text-white text-center\">\r\n                                                    {type.type.name}\r\n                                                </Card.Subtitle>\r\n                                            </Col>)\r\n                                    }) : null : null}\r\n                                    </Row>\r\n                                </Container>\r\n                            </Card.Header>\r\n                            <Card.Body>\r\n                                {!loading ?\r\n                                    monsterDetails.varieties !== undefined ?\r\n                                        <DisplayImages monsterDetails={monsterDetails} />\r\n                                        : null\r\n                                    : <Card.Text className=\"text-center\">Loading...</Card.Text>}\r\n                            </Card.Body>\r\n\r\n                        </Card>\r\n                    </NavLink>\r\n                )\r\n            }\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    return RenderPokemonCard()\r\n}\r\nexport default RenderMonster","C:\\Users\\fireb\\Programming\\websites\\pikapedia\\src\\components\\pokemon-list\\DisplayImages.js",["73","74"],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":18,"column":10,"nodeType":"81","messageId":"82","endLine":18,"endColumn":21},{"ruleId":"79","severity":1,"message":"83","line":18,"column":23,"nodeType":"81","messageId":"82","endLine":18,"endColumn":32},{"ruleId":"84","severity":1,"message":"85","line":54,"column":8,"nodeType":"86","endLine":54,"endColumn":16,"suggestions":"87"},{"ruleId":"84","severity":1,"message":"88","line":41,"column":8,"nodeType":"86","endLine":41,"endColumn":10,"suggestions":"89"},{"ruleId":"90","severity":1,"message":"91","line":46,"column":84,"nodeType":"92","messageId":"93","endLine":46,"endColumn":86},{"ruleId":"79","severity":1,"message":"94","line":13,"column":23,"nodeType":"81","messageId":"82","endLine":13,"endColumn":31},{"ruleId":"84","severity":1,"message":"95","line":102,"column":8,"nodeType":"86","endLine":102,"endColumn":16,"suggestions":"96"},{"ruleId":"84","severity":1,"message":"97","line":109,"column":8,"nodeType":"86","endLine":109,"endColumn":17,"suggestions":"98"},{"ruleId":"84","severity":1,"message":"97","line":119,"column":8,"nodeType":"86","endLine":119,"endColumn":23,"suggestions":"99"},{"ruleId":"79","severity":1,"message":"100","line":8,"column":8,"nodeType":"81","messageId":"82","endLine":8,"endColumn":17},{"ruleId":"79","severity":1,"message":"101","line":9,"column":8,"nodeType":"81","messageId":"82","endLine":9,"endColumn":11},{"ruleId":"79","severity":1,"message":"102","line":10,"column":8,"nodeType":"81","messageId":"82","endLine":10,"endColumn":11},{"ruleId":"79","severity":1,"message":"103","line":12,"column":8,"nodeType":"81","messageId":"82","endLine":12,"endColumn":17},{"ruleId":"84","severity":1,"message":"104","line":63,"column":8,"nodeType":"86","endLine":63,"endColumn":23,"suggestions":"105"},{"ruleId":"106","severity":1,"message":"107","line":33,"column":87,"nodeType":"92","messageId":"108","endLine":35,"endColumn":14},{"ruleId":"84","severity":1,"message":"109","line":42,"column":8,"nodeType":"86","endLine":42,"endColumn":10,"suggestions":"110"},{"ruleId":"79","severity":1,"message":"111","line":2,"column":17,"nodeType":"81","messageId":"82","endLine":2,"endColumn":25},{"ruleId":"79","severity":1,"message":"112","line":2,"column":27,"nodeType":"81","messageId":"82","endLine":2,"endColumn":36},"no-native-reassign",["113"],"no-negated-in-lhs",["114"],"no-unused-vars","'CardColumns' is defined but never used.","Identifier","unusedVar","'CardGroup' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'details'. Either include it or remove the dependency array.","ArrayExpression",["115"],"React Hook useEffect has a missing dependency: 'props.location.search'. Either include it or remove the dependency array.",["116"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'CardDeck' is defined but never used.","React Hook useEffect has a missing dependency: 'filterByRegion'. Either include it or remove the dependency array.",["117"],"React Hook useEffect has a missing dependency: 'updatedDisplayedPokemon'. Either include it or remove the dependency array.",["118"],["119"],"'Container' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'ListGroup' is defined but never used.","React Hook useEffect has missing dependencies: 'GetEvolutions' and 'loading'. Either include them or remove the dependency array.",["120"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'Versions'.","unsafeRefs","React Hook useEffect has a missing dependency: 'GetDetails'. Either include it or remove the dependency array.",["121"],"'useState' is defined but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"122","fix":"123"},{"desc":"124","fix":"125"},{"desc":"126","fix":"127"},{"desc":"128","fix":"129"},{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},{"desc":"134","fix":"135"},"Update the dependencies array to be: [details, number]",{"range":"136","text":"137"},"Update the dependencies array to be: [props.location.search]",{"range":"138","text":"139"},"Update the dependencies array to be: [filterByRegion, region]",{"range":"140","text":"141"},"Update the dependencies array to be: [pokemon, updatedDisplayedPokemon]",{"range":"142","text":"143"},"Update the dependencies array to be: [searchKeyword, updatedDisplayedPokemon]",{"range":"144","text":"145"},"Update the dependencies array to be: [GetEvolutions, evolutionList, loading]",{"range":"146","text":"147"},"Update the dependencies array to be: [GetDetails]",{"range":"148","text":"149"},[1467,1475],"[details, number]",[1012,1014],"[props.location.search]",[2768,2776],"[filterByRegion, region]",[2927,2936],"[pokemon, updatedDisplayedPokemon]",[3245,3260],"[searchKeyword, updatedDisplayedPokemon]",[2499,2514],"[GetEvolutions, evolutionList, loading]",[1240,1242],"[GetDetails]"]