[{"E:\\Pikapedia\\src\\index.js":"1","E:\\Pikapedia\\src\\App.js":"2","E:\\Pikapedia\\src\\reportWebVitals.js":"3","E:\\Pikapedia\\src\\components\\pokemon-list\\PokemonList.js":"4","E:\\Pikapedia\\src\\components\\pokemon-list\\RenderMonster.js":"5","E:\\Pikapedia\\src\\components\\Header.jsx":"6","E:\\Pikapedia\\src\\components\\Content.jsx":"7","E:\\Pikapedia\\src\\components\\AdComponent.jsx":"8","E:\\Pikapedia\\src\\components\\Footer.jsx":"9","E:\\Pikapedia\\src\\components\\details\\PokemonDetails.jsx":"10","E:\\Pikapedia\\src\\components\\details\\moves\\MoveDetails.jsx":"11","E:\\Pikapedia\\src\\components\\details\\RenderMoves.jsx":"12","E:\\Pikapedia\\src\\components\\details\\RenderEvolutions.jsx":"13","E:\\Pikapedia\\src\\components\\legal.jsx":"14"},{"size":517,"mtime":1665707150000,"results":"15","hashOfConfig":"16"},{"size":360,"mtime":1665711654000,"results":"17","hashOfConfig":"16"},{"size":375,"mtime":1665707150000,"results":"18","hashOfConfig":"16"},{"size":6920,"mtime":1665711312000,"results":"19","hashOfConfig":"16"},{"size":7316,"mtime":1665712250000,"results":"20","hashOfConfig":"16"},{"size":541,"mtime":1665711654000,"results":"21","hashOfConfig":"16"},{"size":1082,"mtime":1665712850000,"results":"22","hashOfConfig":"16"},{"size":943,"mtime":1665711654000,"results":"23","hashOfConfig":"16"},{"size":406,"mtime":1665712894000,"results":"24","hashOfConfig":"16"},{"size":5587,"mtime":1665711654000,"results":"25","hashOfConfig":"16"},{"size":4195,"mtime":1665711654000,"results":"26","hashOfConfig":"16"},{"size":5532,"mtime":1665711654000,"results":"27","hashOfConfig":"16"},{"size":6299,"mtime":1665711654000,"results":"28","hashOfConfig":"16"},{"size":617,"mtime":1665712958000,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1ib0xps",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Pikapedia\\src\\index.js",[],["63","64"],"E:\\Pikapedia\\src\\App.js",[],"E:\\Pikapedia\\src\\reportWebVitals.js",[],"E:\\Pikapedia\\src\\components\\pokemon-list\\PokemonList.js",["65","66","67"],"// React imports\r\nimport React, { useState, useEffect } from 'react'\r\n\r\n//Library imports\r\nimport axios from 'axios'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Form from 'react-bootstrap/Form'\r\n\r\n// custom imports\r\nimport RenderMonster from './RenderMonster'\r\n\r\n//functional react component\r\nconst PokemonList = (props) => {\r\n\r\n\r\n    const [pokemon, setPokemon] = useState([])\r\n    const [searchKeyword, setSearchKeyword] = useState(\"\")\r\n    const [displayedPokemon, setDisplayedPokemon] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n    const [region, setRegion] = useState(\"\")\r\n\r\n    /**\r\n     * When the page loads for the first time -> Load the Kanto region pokemon -> display the pokemon once loaded\r\n     * \r\n     * Fix search bar\r\n     * change region to dropdown\r\n     * add back in type dropdowns\r\n     */\r\n\r\n\r\n\r\n\r\n    /* const filterPokemon = (pokemonList) => {\r\n\r\n        let tempPokemon = pokemonList.filter(monster => {\r\n            if (monster.name.includes(searchKeyword.toLowerCase()))\r\n                return monster\r\n        })\r\n        return tempPokemon\r\n    } */\r\n\r\n    const filterByRegion = () => {\r\n        let params = {\r\n            \"limit\": 151,\r\n            \"offset\": 0\r\n        }\r\n        switch (region) {\r\n            case \"Generation One - Kanto\":\r\n                params.limit = 151\r\n                params.offset = 0\r\n                break\r\n\r\n            case \"Generation Two - Johto\":\r\n                params.limit = 100\r\n                params.offset = 151\r\n                break\r\n\r\n            case \"Generation Three - Hoenn\":\r\n                params.limit = 134\r\n                params.offset = 251\r\n                break\r\n\r\n            case \"Generation Four - Sinnoh\":\r\n                params.limit = 107\r\n                params.offset = 386\r\n                break\r\n\r\n            case \"Generation Five - Unova\":\r\n                params.limit = 155\r\n                params.offset = 493\r\n                break\r\n\r\n            case \"Generation Six - Kalos\":\r\n                params.limit = 71\r\n                params.offset = 649\r\n                break\r\n\r\n            case \"Generation Seven - Alola\":\r\n                params.limit = 87\r\n                params.offset = 721\r\n                break\r\n\r\n            case \"Generation Eight - Galar\":\r\n                params.limit = 89\r\n                params.offset = 809\r\n                break\r\n\r\n            case \"All Generations\":\r\n                params.limit = 898\r\n                params.offset = 0\r\n                break\r\n            default:\r\n                params.limit = 151\r\n                params.offset = 0\r\n                break\r\n        }\r\n        return params\r\n\r\n    }\r\n\r\n    const updateRegion = (event) => {\r\n        const selected = event.target.value\r\n        setRegion(selected)\r\n\r\n    }\r\n\r\n    /*const filterByType = (event) => {\r\n        console.log(\"filterByType -> event -> target ->value: \", event.target.value)\r\n    }*/\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        setPokemon([])\r\n        setLoading(true)\r\n        let params = filterByRegion()\r\n        const updatePokemon = async () => {\r\n            let tempPokemon = []\r\n\r\n            await axios.get(`https://pokeapi.co/api/v2/pokemon/?offset=${params.offset}&limit=${params.limit}`).then(response => {\r\n                tempPokemon = response.data.results\r\n                setPokemon(tempPokemon)\r\n\r\n            }\r\n                , (error => {\r\n                    console.log(error)\r\n                }))\r\n            // for (let i = 0; i < tempPokemon.length; i++) {\r\n\r\n            //     await axios.get(tempPokemon[i].url).then(response => {\r\n\r\n            //         tempPokemon[i] = response.data\r\n            //     })\r\n            //     console.log(\"Pass Number: \" + i, \"Pokemon: \", tempPokemon)\r\n            // }\r\n\r\n            setPokemon(tempPokemon)\r\n        }\r\n        updatePokemon()\r\n    }, [region])\r\n\r\n    useEffect(() => {\r\n        if (pokemon.length > 0) {\r\n            setLoading(false)\r\n        }\r\n        updatedDisplayedPokemon()\r\n    }, [pokemon])\r\n\r\n    useEffect(() => {\r\n        const selected = document.querySelector('#generationSelect').value;\r\n        setRegion(selected)\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        updatedDisplayedPokemon()\r\n    }, [searchKeyword]);\r\n\r\n    const updatedDisplayedPokemon = () => {\r\n        setDisplayedPokemon([])\r\n\r\n        let tempPokemon = pokemon\r\n        if (searchKeyword.length > 0) {\r\n            tempPokemon = tempPokemon.filter(onePokemon => onePokemon.name.includes(searchKeyword))\r\n        }\r\n\r\n        let display = []\r\n\r\n        for (let i = 0; i < tempPokemon.length; i++) {\r\n            let url = tempPokemon[i].url.split('/')\r\n            let id = url[6]\r\n            display.push(<RenderMonster key={id} id={id} monster={tempPokemon[i]} />)\r\n        }\r\n        if (display.length === 0) {\r\n            display.push(<Col><h3>No Results</h3></Col>)\r\n        }\r\n        setDisplayedPokemon(display)\r\n    }\r\n\r\n    return (\r\n\r\n        <Container fluid>\r\n            <Row>\r\n                <Col>\r\n                    <Form>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col}>\r\n                                <Form.Label >Search:</Form.Label>\r\n                                <Form.Control type=\"text\" id=\"searchBox\" onChange={event => setSearchKeyword(event.target.value)} />\r\n\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} className=\"col-12 col-md-3\">\r\n                                <Form.Label>Select a generation/region</Form.Label>\r\n                                <Form.Control onChange={event => updateRegion(event)} as=\"select\" name=\"generations\" id=\"generationSelect\" defaultValue=\"Generation One - Kanto\">\r\n                                    <option>Generation One - Kanto</option>\r\n                                    <option>Generation Two - Johto</option>\r\n                                    <option>Generation Three - Hoenn</option>\r\n                                    <option>Generation Four - Sinnoh</option>\r\n                                    <option>Generation Five - Unova</option>\r\n                                    <option>Generation Six - Kalos</option>\r\n                                    <option>Generation Seven - Alola</option>\r\n                                    <option>Generation Eight - Galar</option>\r\n                                    <option>All Generations</option>\r\n                                </Form.Control>\r\n\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                {loading ? <Col>Loading...</Col> : displayedPokemon}\r\n            </Row>\r\n        </Container >\r\n\r\n    )\r\n}\r\nexport default PokemonList","E:\\Pikapedia\\src\\components\\pokemon-list\\RenderMonster.js",[],"E:\\Pikapedia\\src\\components\\Header.jsx",[],"E:\\Pikapedia\\src\\components\\Content.jsx",[],"E:\\Pikapedia\\src\\components\\AdComponent.jsx",[],"E:\\Pikapedia\\src\\components\\Footer.jsx",[],"E:\\Pikapedia\\src\\components\\details\\PokemonDetails.jsx",[],"E:\\Pikapedia\\src\\components\\details\\moves\\MoveDetails.jsx",["68","69"],"// React imports\r\nimport React, { useEffect, useState } from 'react'\r\n\r\n//Library imports\r\nimport axios from 'axios'\r\n\r\n//React-Bootstrap imports\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Card from 'react-bootstrap/Card'\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\n\r\n// custom imports\r\n\r\n//functional react component\r\nconst MoveDetails = (props) => {\r\n\r\n    console.log(props)\r\n    const [details, setDetails] = useState({})\r\n\r\n    const getDetails = async (url) => {\r\n        await axios.get(url).then(response => {\r\n\r\n            setDetails(response.data)\r\n        }\r\n            , (error => {\r\n                console.log(error)\r\n            }))\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        const number = props.location.search.slice(8)\r\n        if (number) {\r\n            const url = `https://pokeapi.co/api/v2/move/${number}`\r\n            console.log(url)\r\n            getDetails(url)\r\n        }\r\n\r\n    }, []);\r\n\r\n    const RenderDescriptions = () => {\r\n        let descriptions = []\r\n\r\n        details.flavor_text_entries.map(({ flavor_text, language, version_group }) => {\r\n            if (language.name === \"en\") {\r\n                descriptions.push(\r\n                    <ListGroup.Item key={details.version_group}>\r\n                        <Container>\r\n                            <Row>\r\n                                <Col className=\"col-12 col-md-4\">{version_group.name}</Col>\r\n                                <Col className=\"col-12 col-md-8\">{flavor_text}</Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </ListGroup.Item>\r\n                )\r\n            }\r\n\r\n        })\r\n\r\n        return descriptions\r\n    }\r\n\r\n    if (details.name !== undefined) {\r\n        details.name = details.name !== undefined ? details.name.replace('-', \" \") : undefined\r\n        return (\r\n            <Card>\r\n                <Card.Header>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col>\r\n                                <Card.Title className=\"text-center text-uppercase\">\r\n                                    {details.name}\r\n                                </Card.Title>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Card.Header>\r\n                <Card.Header className=\"text-center\">\r\n                    <Row>\r\n                        <Col>\r\n                            Damage Type\r\n                        </Col>\r\n                        <Col>\r\n                            Power\r\n                        </Col>\r\n                        <Col>PP</Col>\r\n                        <Col>Accuracy</Col>\r\n                    </Row>\r\n                    <hr />\r\n                    <Row>\r\n                        <Col>\r\n                            {details.damage_class.name} - {details.type.name}\r\n                        </Col>\r\n                        <Col>\r\n                            {details.power}\r\n                        </Col>\r\n                        <Col>\r\n                            {details.pp}\r\n                        </Col>\r\n                        <Col>\r\n                            {details.accuracy}\r\n                        </Col>\r\n                    </Row>\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <ListGroup variant=\"flush\">\r\n                        <ListGroup.Item >\r\n                            <Container>\r\n                                <Row>\r\n                                    <Col className=\"col-12 col-md-4\"><Card.Subtitle>Game</Card.Subtitle></Col>\r\n                                    <Col className=\"col-12 col-md-8\"><Card.Subtitle>Description</Card.Subtitle></Col>\r\n                                </Row>\r\n                            </Container>\r\n                        </ListGroup.Item>\r\n                        {RenderDescriptions()}\r\n                    </ListGroup>\r\n                </Card.Body>\r\n            </Card>\r\n\r\n        )\r\n    } else {\r\n        return <Col><Card.Title>Loading...</Card.Title></Col>\r\n    }\r\n}\r\n\r\nexport default MoveDetails","E:\\Pikapedia\\src\\components\\details\\RenderMoves.jsx",["70"],"//react imports\r\nimport React, { useEffect, useState } from 'react'\r\n\r\nimport axios from 'axios'\r\n\r\n\r\n// bootstrap imports\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Card from 'react-bootstrap/Card'\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\nimport NavLink from 'react-bootstrap/NavLink'\r\nimport Accordion from 'react-bootstrap/Accordion'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCaretSquareDown } from '@fortawesome/free-regular-svg-icons'\r\n\r\nconst RenderMoves = ({ moves }) => {\r\n    const [loading, setLoading] = useState(true)\r\n    const [versionGroups, setVersionGroups] = useState([])\r\n\r\n    const getVersions = async () => {\r\n        let Versions = []\r\n        let versionDetails = []\r\n        await axios.get('https://pokeapi.co/api/v2/version-group/').then(response => {\r\n            const result = response.data.results\r\n            Versions = result\r\n        })\r\n\r\n        for (let i = 0; i < Versions.length; i++) {\r\n            await axios.get(`https://pokeapi.co/api/v2/version-group/${i + 1}/`).then(response => {\r\n                Versions[i] = response.data\r\n            })\r\n        }\r\n\r\n        versionDetails = Versions\r\n        setVersionGroups(versionDetails)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getVersions()\r\n        if (versionGroups.length > 0) {\r\n            setLoading(false)\r\n        }\r\n        return () => {\r\n        }\r\n    }, [versionGroups])\r\n\r\n    let moveElements = []\r\n\r\n\r\n\r\n    if (!loading) {\r\n\r\n        moves.map(({ version_group_details, move }) => {\r\n            const moveUrl = move.url.split('/')\r\n            const moveNumber = moveUrl[6]\r\n            let moveDetails = []\r\n            moveDetails.push(\r\n                <ListGroup.Item key={moveNumber}>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col>{<Card.Subtitle className=\"text-center\">Game</Card.Subtitle>}</Col>\r\n                            <Col>{<Card.Subtitle className=\"text-center\">Method</Card.Subtitle>}</Col>\r\n                            <Col>{<Card.Subtitle className=\"text-center\">Level</Card.Subtitle>}</Col>\r\n                        </Row>\r\n                    </Container>\r\n                </ListGroup.Item>)\r\n            version_group_details.map(item => {\r\n                const name = item.version_group.name\r\n\r\n                // check if the version group name matches the name in the \r\n                const version = versionGroups.find(version => version.name === name ? version : null)\r\n                const gameLinks = version.versions.map(game => {\r\n                    /*const gameUrl = game.url.split('/')\r\n                    //const gameNumber = gameUrl[6]*/\r\n\r\n                    let items = []\r\n                    items.push(\r\n                        <Col>\r\n                            {game.name}\r\n                        </Col>\r\n                    )\r\n\r\n                    return items\r\n                })\r\n                moveDetails.push(\r\n                    <ListGroup.Item>\r\n                        <Container fluid>\r\n                            <Row>\r\n                                <Col className=\"text-center\"><Container><Row>{gameLinks}</Row></Container></Col>\r\n                                <Col className=\"text-center\">{item.move_learn_method.name}</Col>\r\n                                <Col className=\"text-center\">{item.level_learned_at}</Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </ListGroup.Item>\r\n                )\r\n                return 0\r\n            })\r\n            let tempArray = move.url.split('/')\r\n            let number = tempArray[6]\r\n            moveElements.push(\r\n                <ListGroup.Item key={moveNumber}>\r\n                    <Accordion>\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Container>\r\n                                    <Row>\r\n                                        <Col className=\"col-11 text-center\">\r\n                                            <NavLink href={`/move/${move.name}?number=${number}`}>\r\n                                                <Card.Title>\r\n                                                    {move.name}\r\n                                                </Card.Title>\r\n                                            </NavLink>\r\n                                        </Col>\r\n                                        <Col className=\"col-1\">\r\n                                            <Accordion.Toggle as={Button} eventKey={moveNumber}><FontAwesomeIcon icon={faCaretSquareDown} /></Accordion.Toggle>                                        </Col>\r\n                                    </Row>\r\n                                </Container>\r\n                            </Card.Header>\r\n                            <Accordion.Collapse eventKey={moveNumber}>\r\n                                <Card.Body>\r\n                                    <ListGroup variant=\"flush\">{moveDetails}</ListGroup >\r\n                                </Card.Body>\r\n                            </Accordion.Collapse>\r\n                        </Card>\r\n                    </Accordion>\r\n                </ListGroup.Item >)\r\n            return 0\r\n        })\r\n\r\n    } else { moveElements.push(<Card.Title>Loading...</Card.Title>) }\r\n\r\n    return moveElements\r\n}\r\n\r\nexport default RenderMoves","E:\\Pikapedia\\src\\components\\details\\RenderEvolutions.jsx",["71"],"// React imports\r\nimport React, { useState, useEffect } from 'react'\r\n\r\n//Library imports\r\nimport axios from 'axios'\r\n\r\n//React-Bootstrap imports\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Card from 'react-bootstrap/Card'\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\n\r\nconst RenderEvolution = ({ evolutionChain }) => {\r\n    const [loading, setLoading] = useState(true)\r\n    const [evolutionList, setEvolutionList] = useState({})\r\n\r\n    const GetEvolutions = async () => {\r\n        await axios.get(evolutionChain.url).then(response => {\r\n            evolutionChain = { ...response.data }\r\n        })\r\n        await axios.get(evolutionChain.chain.species.url).then(response => {\r\n            evolutionChain.chain.species = { ...response.data }\r\n        })\r\n        await axios.get(`https://pokeapi.co/api/v2/pokemon/${evolutionChain.chain.species.id}`)\r\n            .then(response => {\r\n                evolutionChain.chain.species = { ...response.data }\r\n            })\r\n        for (let i = 0; i < evolutionChain.chain.evolves_to.length; i++) {\r\n\r\n            let evolves_to = evolutionChain.chain.evolves_to[i]\r\n            await axios.get(evolves_to.species.url).then(response => {\r\n                evolves_to.species = { ...response.data }\r\n            })\r\n            await axios.get(`https://pokeapi.co/api/v2/pokemon/${evolves_to.species.id}`)\r\n                .then(response => {\r\n                    evolves_to.species = { ...response.data }\r\n                })\r\n            for (let secondEvo = 0; secondEvo < evolves_to.evolves_to.length; secondEvo++) {\r\n\r\n                await axios.get(evolves_to.evolves_to[secondEvo].species.url).then(response => {\r\n                    evolves_to.evolves_to[secondEvo].species = { ...response.data }\r\n                })\r\n                await axios.get(`https://pokeapi.co/api/v2/pokemon/${evolves_to.evolves_to[secondEvo].species.id}`)\r\n                    .then(response => {\r\n                        evolves_to.evolves_to[secondEvo].species = { ...response.data }\r\n                    })\r\n            }\r\n\r\n            // Load all version groups then all versions\r\n        }\r\n\r\n        setEvolutionList(Object.assign(evolutionChain.chain, { isUpdated: true }))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (loading) {\r\n            GetEvolutions()\r\n        }\r\n        if (evolutionList.isUpdated) {\r\n            setLoading(false)\r\n        }\r\n    }, [evolutionList]);\r\n\r\n    let evolutions = []\r\n\r\n    if (!loading) {\r\n        let evolutionItems = () => {\r\n            let firstEvo = (\r\n                <Col className=\"col-12 col-md-2\">\r\n                    <Card>\r\n                        <Card.Header>\r\n                            <Card.Subtitle className=\"text-center text-uppercase\">\r\n                                {evolutionList.species.name}\r\n                            </Card.Subtitle>\r\n                        </Card.Header>\r\n                        <Card.Img src={evolutionList.species.sprites.front_default} />\r\n                        <Card.Body>\r\n                            <Card.Text className=\"text-center\">\r\n                                Level\r\n                            </Card.Text>\r\n                            <Card.Text>\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col >)\r\n\r\n            let secondEvo = []\r\n            let thirdEvo = []\r\n            for (let evo = 0; evo < evolutionList.evolves_to.length; evo++) {\r\n\r\n                const evolvesTo = evolutionList.evolves_to[evo]\r\n                secondEvo.push(\r\n                    <Col className=\"col-12 col-md-2\">\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Card.Subtitle className=\"text-center text-uppercase\">\r\n                                    {evolvesTo.species.name}\r\n                                </Card.Subtitle>\r\n                            </Card.Header>\r\n                            <Card.Img src={evolvesTo.species.sprites.front_default} />\r\n                            <Card.Body>\r\n                                <Card.Text className=\"text-center\">\r\n                                    Level\r\n                        </Card.Text>\r\n                                <Card.Text>\r\n                                </Card.Text>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col >\r\n                )\r\n                for (let evoTwo = 0; evoTwo < evolvesTo.evolves_to.length; evoTwo++) {\r\n                    thirdEvo.push(\r\n                        <Col className=\"col-12 col-md-2\">\r\n                            <Card>\r\n                                <Card.Header>\r\n                                    <Card.Subtitle className=\"text-center text-uppercase\">\r\n                                        {evolvesTo.evolves_to[evoTwo].species.name}\r\n                                    </Card.Subtitle>\r\n                                </Card.Header>\r\n                                <Card.Img src={evolvesTo.evolves_to[evoTwo].species.sprites.front_default} />\r\n                                <Card.Body>\r\n                                    <Card.Text className=\"text-center\">\r\n                                        Level\r\n                            </Card.Text>\r\n                                    <Card.Text>\r\n                                    </Card.Text>\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </Col >\r\n                    )\r\n                }\r\n            }\r\n            let evoList = (\r\n                <Container fluid>\r\n                    <Row className=\"justify-content-center\">\r\n                        {firstEvo}\r\n                        {secondEvo}\r\n\r\n                        {thirdEvo}\r\n                    </Row>\r\n                </Container>)\r\n\r\n\r\n            return evoList\r\n        }\r\n\r\n        evolutions.push(\r\n            <ListGroup.Item>\r\n                {evolutionItems()}\r\n            </ListGroup.Item>)\r\n    } else { evolutions.push(<Card.Title className=\"text-center\">Loading...</Card.Title>) }\r\n\r\n    return evolutions\r\n\r\n}\r\n\r\nexport default RenderEvolution","E:\\Pikapedia\\src\\components\\legal.jsx",[],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":142,"column":8,"nodeType":"78","endLine":142,"endColumn":16,"suggestions":"79"},{"ruleId":"76","severity":1,"message":"80","line":149,"column":8,"nodeType":"78","endLine":149,"endColumn":17,"suggestions":"81"},{"ruleId":"76","severity":1,"message":"80","line":158,"column":8,"nodeType":"78","endLine":158,"endColumn":23,"suggestions":"82"},{"ruleId":"76","severity":1,"message":"83","line":41,"column":8,"nodeType":"78","endLine":41,"endColumn":10,"suggestions":"84"},{"ruleId":"85","severity":1,"message":"86","line":46,"column":84,"nodeType":"87","messageId":"88","endLine":46,"endColumn":86},{"ruleId":"89","severity":1,"message":"90","line":33,"column":87,"nodeType":"87","messageId":"91","endLine":35,"endColumn":14},{"ruleId":"76","severity":1,"message":"92","line":63,"column":8,"nodeType":"78","endLine":63,"endColumn":23,"suggestions":"93"},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'filterByRegion'. Either include it or remove the dependency array.","ArrayExpression",["96"],"React Hook useEffect has a missing dependency: 'updatedDisplayedPokemon'. Either include it or remove the dependency array.",["97"],["98"],"React Hook useEffect has a missing dependency: 'props.location.search'. Either include it or remove the dependency array.",["99"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'Versions'.","unsafeRefs","React Hook useEffect has missing dependencies: 'GetEvolutions' and 'loading'. Either include them or remove the dependency array.",["100"],"no-global-assign","no-unsafe-negation",{"desc":"101","fix":"102"},{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},{"desc":"107","fix":"108"},{"desc":"109","fix":"110"},"Update the dependencies array to be: [filterByRegion, region]",{"range":"111","text":"112"},"Update the dependencies array to be: [pokemon, updatedDisplayedPokemon]",{"range":"113","text":"114"},"Update the dependencies array to be: [searchKeyword, updatedDisplayedPokemon]",{"range":"115","text":"116"},"Update the dependencies array to be: [props.location.search]",{"range":"117","text":"118"},"Update the dependencies array to be: [GetEvolutions, evolutionList, loading]",{"range":"119","text":"120"},[3976,3984],"[filterByRegion, region]",[4131,4140],"[pokemon, updatedDisplayedPokemon]",[4354,4369],"[searchKeyword, updatedDisplayedPokemon]",[1012,1014],"[props.location.search]",[2499,2514],"[GetEvolutions, evolutionList, loading]"]