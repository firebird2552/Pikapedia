[{"C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\index.js":"1","C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\App.js":"2","C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\Content.js":"3","C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\Header.js":"4","C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\details\\moves\\MoveDetails.js":"5","C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\pokemon-list\\PokemonList.js":"6","C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\details\\PokemonDetails.js":"7","C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\details\\RenderMoves.js":"8","C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\pokemon-list\\RenderMonster.js":"9","C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\details\\RenderEvolutions.js":"10","C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\pokemon-list\\RenderPokemon.js":"11","C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\api\\GetPokemon.js":"12","C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\pokemon-list\\DisplayImages.js":"13"},{"size":228,"mtime":1670112710316,"results":"14","hashOfConfig":"15"},{"size":360,"mtime":1611449691511,"results":"16","hashOfConfig":"15"},{"size":781,"mtime":1670112710308,"results":"17","hashOfConfig":"15"},{"size":767,"mtime":1670112710310,"results":"18","hashOfConfig":"15"},{"size":4361,"mtime":1670112710314,"results":"19","hashOfConfig":"15"},{"size":5329,"mtime":1670121532262,"results":"20","hashOfConfig":"15"},{"size":5246,"mtime":1670112710311,"results":"21","hashOfConfig":"15"},{"size":5532,"mtime":1611688739851,"results":"22","hashOfConfig":"15"},{"size":3755,"mtime":1670124420911,"results":"23","hashOfConfig":"15"},{"size":5476,"mtime":1670114780654,"results":"24","hashOfConfig":"15"},{"size":1932,"mtime":1670116590840,"results":"25","hashOfConfig":"15"},{"size":2167,"mtime":1670124779653,"results":"26","hashOfConfig":"15"},{"size":1236,"mtime":1670125679310,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"127bfp2",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},"C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\index.js",[],["61","62"],"C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\App.js",[],"C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\Content.js",[],"C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\Header.js",[],"C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\details\\moves\\MoveDetails.js",["63","64"],"// React imports\r\nimport React, { useEffect, useState } from 'react'\r\n\r\n//Library imports\r\nimport axios from 'axios'\r\n\r\n//React-Bootstrap imports\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Card from 'react-bootstrap/Card'\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\n\r\n// custom imports\r\n\r\n//functional react component\r\nconst MoveDetails = (props) => {\r\n\r\n    console.log(props)\r\n    const [details, setDetails] = useState({})\r\n\r\n    const getDetails = async (url) => {\r\n        let detailsPromise = axios.get(url)\r\n        //     .then(response => {\r\n\r\n        //     setDetails(response.data)\r\n        // }\r\n        //     , (error => {\r\n        //         console.log(error)\r\n        //     }))\r\n        let details = await detailsPromise\r\n        console.log(`Move Details -> get Details -> details: ${details}`)\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        const number = props.location.search.slice(8)\r\n        if (number) {\r\n            const url = `https://pokeapi.co/api/v2/move/${number}`\r\n            console.log(url)\r\n            getDetails(url)\r\n        }\r\n\r\n    }, []);\r\n\r\n    const RenderDescriptions = () => {\r\n        let descriptions = []\r\n\r\n        details.flavor_text_entries.map(({ flavor_text, language, version_group }) => {\r\n            if (language.name === \"en\") {\r\n                descriptions.push(\r\n                    <ListGroup.Item key={details.version_group}>\r\n                        <Container>\r\n                            <Row>\r\n                                <Col className=\"col-12 col-md-4\">{version_group.name}</Col>\r\n                                <Col className=\"col-12 col-md-8\">{flavor_text}</Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </ListGroup.Item>\r\n                )\r\n            }\r\n\r\n        })\r\n\r\n        return descriptions\r\n    }\r\n\r\n    if (details.name !== undefined) {\r\n        details.name = details.name !== undefined ? details.name.replace('-', \" \") : undefined\r\n        return (\r\n            <Card>\r\n                <Card.Header>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col>\r\n                                <Card.Title className=\"text-center text-uppercase\">\r\n                                    {details.name}\r\n                                </Card.Title>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Card.Header>\r\n                <Card.Header className=\"text-center\">\r\n                    <Row>\r\n                        <Col>\r\n                            Damage Type\r\n                        </Col>\r\n                        <Col>\r\n                            Power\r\n                        </Col>\r\n                        <Col>PP</Col>\r\n                        <Col>Accuracy</Col>\r\n                    </Row>\r\n                    <hr />\r\n                    <Row>\r\n                        <Col>\r\n                            {details.damage_class.name} - {details.type.name}\r\n                        </Col>\r\n                        <Col>\r\n                            {details.power}\r\n                        </Col>\r\n                        <Col>\r\n                            {details.pp}\r\n                        </Col>\r\n                        <Col>\r\n                            {details.accuracy}\r\n                        </Col>\r\n                    </Row>\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <ListGroup variant=\"flush\">\r\n                        <ListGroup.Item >\r\n                            <Container>\r\n                                <Row>\r\n                                    <Col className=\"col-12 col-md-4\"><Card.Subtitle>Game</Card.Subtitle></Col>\r\n                                    <Col className=\"col-12 col-md-8\"><Card.Subtitle>Description</Card.Subtitle></Col>\r\n                                </Row>\r\n                            </Container>\r\n                        </ListGroup.Item>\r\n                        {RenderDescriptions()}\r\n                    </ListGroup>\r\n                </Card.Body>\r\n            </Card>\r\n\r\n        )\r\n    } else {\r\n        return <Col><Card.Title>Loading...</Card.Title></Col>\r\n    }\r\n}\r\n\r\nexport default MoveDetails","C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\pokemon-list\\PokemonList.js",[],"C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\details\\PokemonDetails.js",["65"],"\r\n// React imports\r\nimport React, { useState, useEffect } from 'react'\r\n\r\n//Library imports\r\nimport axios from 'axios'\r\n\r\n//React-Bootstrap imports\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Card from 'react-bootstrap/Card'\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\n\r\n// custom imports\r\nimport RenderMoves from './RenderMoves'\r\nimport RenderEvolution from './RenderEvolutions'\r\n\r\n\r\n//functional react component\r\nconst PokemonDetails = (props) => {\r\n\r\n    const [details, setDetails] = useState(props.details)\r\n    const number = details.id\r\n    console.log(details)\r\n    const getDetails = async (url) => {\r\n\r\n        let tempDetails = {}\r\n\r\n        await axios.get(url).then(response => {\r\n\r\n            tempDetails = response.data\r\n        }\r\n            , (error => {\r\n                console.log(error)\r\n            }))\r\n        await axios.get(tempDetails.species.url).then(response => {\r\n\r\n            tempDetails.species = response.data\r\n        }\r\n            , (error => {\r\n                console.log(error)\r\n            }))\r\n        setDetails(tempDetails)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (details === undefined) {\r\n            if (number) {\r\n                const url = `https://pokeapi.co/api/v2/pokemon/${number}`\r\n                getDetails(url)\r\n            }\r\n        }\r\n    }, [number, details]);\r\n\r\n\r\n    const RenderImages = () => {\r\n        let imageNames = [\"front_default\", \"back_default\", \"front_shiny\", \"back_shiny\", \"front_female\", \"back_female\", \"front_shiny_female\", \"back_shiny_female\"]\r\n        let images = []\r\n\r\n        imageNames.map(name => {\r\n\r\n            if (details.sprites !== undefined) {\r\n                if (details.sprites[name] !== null) {\r\n                    images.push(<Col className=\"col-12 col-md-3\"><Card.Img src={details.sprites[name]} /></Col>)\r\n                }\r\n            }\r\n            return 0\r\n        })\r\n\r\n        return images\r\n    }\r\n\r\n\r\n\r\n    console.log(details)\r\n\r\n    return (\r\n        <div>\r\n            <Card.Body>\r\n                {details.types !== undefined ? details.types.map(({ type }) => {\r\n                    return (\r\n                        <Col>\r\n                            <Card.Subtitle className=\"text-center\">{type.name.toUpperCase()}</Card.Subtitle>\r\n                        </Col>\r\n                    )\r\n                }) : null}\r\n                <RenderImages />\r\n            </Card.Body>\r\n            <Card.Body>\r\n                <Card.Subtitle className=\"text-center\">Evolution</Card.Subtitle><hr />\r\n                {details !== undefined ? <RenderEvolution evolutionChain={details.evolution_chain} /> : <Col>Loading</Col>}\r\n            </Card.Body>\r\n            <Card.Body>\r\n                <Card.Subtitle className=\"text-center\">Base Stats</Card.Subtitle>\r\n                <hr />\r\n                <ListGroup variant=\"flush\">\r\n                    {details.varieties[0].pokemon.stats !== undefined ? details.varieties[0].pokemon.stats.map((stat) => {\r\n                        return (\r\n                            <ListGroup.Item>\r\n                                <Container>\r\n                                    <Row>\r\n                                        <Col>{stat.stat.name}</Col>\r\n                                        <Col>{stat.base_stat}</Col>\r\n                                    </Row>\r\n                                </Container>\r\n                            </ListGroup.Item>)\r\n                    }) : null}\r\n                </ListGroup>\r\n            </Card.Body>\r\n            <Card.Body>\r\n                <Container fluid>\r\n                    <Row>\r\n                        <Col >\r\n                            <Card.Subtitle className=\"text-center\">Moves</Card.Subtitle>\r\n                        </Col>\r\n                    </Row>\r\n                    <hr />\r\n                    <Row>\r\n                        <Col>\r\n                            <ListGroup variant=\"flush\">\r\n                                <RenderMoves moves={details.varieties[0].pokemon.moves} />\r\n                            </ListGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n\r\n            </Card.Body>\r\n        </div >\r\n    )\r\n}\r\n\r\n// Evolution Chain -> images -> level -> links\r\n\r\nPokemonDetails.getInitialProps = async ({ query }) => {\r\n    const number = query.number\r\n    let details = {}\r\n    if (number) {\r\n        const url = 'https://pokeapi.co/api/v2/'\r\n        const pokemon = `pokemon/${number}`\r\n\r\n        await axios.get(url + pokemon).then(response => {\r\n\r\n            details = response.data\r\n        }\r\n            , (error => {\r\n                console.log(error)\r\n            }))\r\n        await axios.get(details.species.url).then(response => {\r\n\r\n            details.species = response.data\r\n        }\r\n            , (error => {\r\n                console.log(error)\r\n            }))\r\n        /**\r\n         * once evolution chain is loaded\r\n         * determine if pokemon evolves\r\n         * if pokemon evolves how many times does it evolve\r\n         * Make axios call for each evolution\r\n         */\r\n\r\n    }\r\n\r\n    return { details }\r\n}\r\n\r\nexport default PokemonDetails","C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\details\\RenderMoves.js",["66"],"//react imports\r\nimport React, { useEffect, useState } from 'react'\r\n\r\nimport axios from 'axios'\r\n\r\n\r\n// bootstrap imports\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Card from 'react-bootstrap/Card'\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\nimport NavLink from 'react-bootstrap/NavLink'\r\nimport Accordion from 'react-bootstrap/Accordion'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCaretSquareDown } from '@fortawesome/free-regular-svg-icons'\r\n\r\nconst RenderMoves = ({ moves }) => {\r\n    const [loading, setLoading] = useState(true)\r\n    const [versionGroups, setVersionGroups] = useState([])\r\n\r\n    const getVersions = async () => {\r\n        let Versions = []\r\n        let versionDetails = []\r\n        await axios.get('https://pokeapi.co/api/v2/version-group/').then(response => {\r\n            const result = response.data.results\r\n            Versions = result\r\n        })\r\n\r\n        for (let i = 0; i < Versions.length; i++) {\r\n            await axios.get(`https://pokeapi.co/api/v2/version-group/${i + 1}/`).then(response => {\r\n                Versions[i] = response.data\r\n            })\r\n        }\r\n\r\n        versionDetails = Versions\r\n        setVersionGroups(versionDetails)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getVersions()\r\n        if (versionGroups.length > 0) {\r\n            setLoading(false)\r\n        }\r\n        return () => {\r\n        }\r\n    }, [versionGroups])\r\n\r\n    let moveElements = []\r\n\r\n\r\n\r\n    if (!loading) {\r\n\r\n        moves.map(({ version_group_details, move }) => {\r\n            const moveUrl = move.url.split('/')\r\n            const moveNumber = moveUrl[6]\r\n            let moveDetails = []\r\n            moveDetails.push(\r\n                <ListGroup.Item key={moveNumber}>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col>{<Card.Subtitle className=\"text-center\">Game</Card.Subtitle>}</Col>\r\n                            <Col>{<Card.Subtitle className=\"text-center\">Method</Card.Subtitle>}</Col>\r\n                            <Col>{<Card.Subtitle className=\"text-center\">Level</Card.Subtitle>}</Col>\r\n                        </Row>\r\n                    </Container>\r\n                </ListGroup.Item>)\r\n            version_group_details.map(item => {\r\n                const name = item.version_group.name\r\n\r\n                // check if the version group name matches the name in the \r\n                const version = versionGroups.find(version => version.name === name ? version : null)\r\n                const gameLinks = version.versions.map(game => {\r\n                    /*const gameUrl = game.url.split('/')\r\n                    //const gameNumber = gameUrl[6]*/\r\n\r\n                    let items = []\r\n                    items.push(\r\n                        <Col>\r\n                            {game.name}\r\n                        </Col>\r\n                    )\r\n\r\n                    return items\r\n                })\r\n                moveDetails.push(\r\n                    <ListGroup.Item>\r\n                        <Container fluid>\r\n                            <Row>\r\n                                <Col className=\"text-center\"><Container><Row>{gameLinks}</Row></Container></Col>\r\n                                <Col className=\"text-center\">{item.move_learn_method.name}</Col>\r\n                                <Col className=\"text-center\">{item.level_learned_at}</Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </ListGroup.Item>\r\n                )\r\n                return 0\r\n            })\r\n            let tempArray = move.url.split('/')\r\n            let number = tempArray[6]\r\n            moveElements.push(\r\n                <ListGroup.Item key={moveNumber}>\r\n                    <Accordion>\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Container>\r\n                                    <Row>\r\n                                        <Col className=\"col-11 text-center\">\r\n                                            <NavLink href={`/move/${move.name}?number=${number}`}>\r\n                                                <Card.Title>\r\n                                                    {move.name}\r\n                                                </Card.Title>\r\n                                            </NavLink>\r\n                                        </Col>\r\n                                        <Col className=\"col-1\">\r\n                                            <Accordion.Toggle as={Button} eventKey={moveNumber}><FontAwesomeIcon icon={faCaretSquareDown} /></Accordion.Toggle>                                        </Col>\r\n                                    </Row>\r\n                                </Container>\r\n                            </Card.Header>\r\n                            <Accordion.Collapse eventKey={moveNumber}>\r\n                                <Card.Body>\r\n                                    <ListGroup variant=\"flush\">{moveDetails}</ListGroup >\r\n                                </Card.Body>\r\n                            </Accordion.Collapse>\r\n                        </Card>\r\n                    </Accordion>\r\n                </ListGroup.Item >)\r\n            return 0\r\n        })\r\n\r\n    } else { moveElements.push(<Card.Title>Loading...</Card.Title>) }\r\n\r\n    return moveElements\r\n}\r\n\r\nexport default RenderMoves","C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\pokemon-list\\RenderMonster.js",["67"],"// React imports\r\nimport React, { useState, useEffect } from 'react'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\n\r\n//Library imports\r\nimport Card from 'react-bootstrap/Card'\r\nimport DisplayImages from './DisplayImages'\r\nimport { GetPokemonDetails } from '../../api/GetPokemon'\r\n\r\n// custom imports\r\n\r\n//functional react component\r\nconst RenderMonster = ({ id, monster, details = false }) => {\r\n    const [pokemon, setPokemon] = useState(monster)\r\n    const [loading, setLoading] = useState(true)\r\n\r\n\r\n\r\n    const GetDetails = async () => {\r\n        await GetPokemonDetails(pokemon).then(result => {\r\n            setPokemon(result)\r\n            setLoading(false)\r\n\r\n        })\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        GetDetails()\r\n    }, [])\r\n\r\n    const colors = {\r\n        // from https://www.epidemicjohto.com/t882-type-colors-hex-colors\r\n        \"normal\": \"A8A77A\",\r\n        \"fire\": \"EE8130\",\r\n        \"water\": \"6390F0\",\r\n        \"electric\": \"F7D02C\",\r\n        \"grass\": \"7AC74C\",\r\n        \"ice\": \"96D9D6\",\r\n        \"fighting\": \"C22E28\",\r\n        \"poison\": \"A33EA1\",\r\n        \"ground\": \"E2BF65\",\r\n        \"flying\": \"A98FF3\",\r\n        \"psychic\": \"F95587\",\r\n        \"bug\": \"A6B91A\",\r\n        \"rock\": \"B6A136\",\r\n        \"ghost\": \"735797\",\r\n        \"dragon\": \"6F35FC\",\r\n        \"dark\": \"705746\",\r\n        \"steel\": \"B7B7CE\",\r\n        \"fairy\": \"D685AD\",\r\n    }\r\n\r\n    const cardStyle = () => {\r\n        const types = pokemon.varieties !== undefined ? pokemon.varieties[0].pokemon.types.map(type => (type.type.name)) : []\r\n\r\n        let style\r\n        if (types.length > 1) {\r\n            style = { background: `linear-gradient(to right, #${colors[types[0]]}, #${colors[types[1]]}` }\r\n        }\r\n        else if (types.length === 1) {\r\n            style = {\r\n                background: `#${colors[types[0]]}`\r\n            }\r\n        }\r\n        return style\r\n    }\r\n\r\n    const RenderPokemonCard = () => {\r\n        if (!loading) {\r\n            return (\r\n                <Col>\r\n                    <Card>\r\n                        <Card.Header style={cardStyle()}>\r\n                            <Card.Title className=\"text-center text-white\">\r\n                                #{id} {monster.name.toUpperCase()}\r\n                            </Card.Title>\r\n                            <Container>\r\n                                <Row>{pokemon.varieties !== undefined ? pokemon.varieties[0].pokemon.types !== undefined ? pokemon.varieties[0].pokemon.types.map(type => {\r\n                                    return (\r\n                                        <Col key={type.type.name}>\r\n                                            <Card.Subtitle className=\"text-white text-center\">\r\n                                                {type.type.name}\r\n                                            </Card.Subtitle>\r\n                                        </Col>)\r\n                                }) : null : null}\r\n                                </Row>\r\n                            </Container>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            {!loading ?\r\n                                    <DisplayImages pokemon={pokemon} />\r\n                                : <Card.Text className=\"text-center\">Loading...</Card.Text>}\r\n                        </Card.Body>\r\n\r\n                    </Card>\r\n                </Col>\r\n            )\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    return RenderPokemonCard()\r\n}\r\n\r\nexport const RenderDetails = () => {\r\n\r\n    return (<p>How much wood could a wood chuck norris chuck if a wood chuck norris could chuck your moms wood</p>)\r\n\r\n}\r\nexport default RenderMonster","C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\details\\RenderEvolutions.js",["68"],"// React imports\r\nimport React, { useState, useEffect } from 'react'\r\n\r\n//Library imports\r\nimport axios from 'axios'\r\n\r\n//React-Bootstrap imports\r\nimport Card from 'react-bootstrap/Card'\r\n\r\nconst RenderEvolution = ({ evolutionChain }) => {\r\n    const [loading, setLoading] = useState(true)\r\n    const [evolutionList, setEvolutionList] = useState({})\r\n\r\n    const GetEvolutions = async () => {\r\n        await axios.get(evolutionChain.url).then(response => {\r\n            evolutionChain = { ...response.data }\r\n        })\r\n        await axios.get(evolutionChain.chain.species.url).then(response => {\r\n            evolutionChain.chain.species = { ...response.data }\r\n        })\r\n        await axios.get(`https://pokeapi.co/api/v2/pokemon/${evolutionChain.chain.species.id}`)\r\n            .then(response => {\r\n                evolutionChain.chain.species = { ...response.data }\r\n            })\r\n        for (let i = 0; i < evolutionChain.chain.evolves_to.length; i++) {\r\n\r\n            let evolves_to = evolutionChain.chain.evolves_to[i]\r\n            await axios.get(evolves_to.species.url).then(response => {\r\n                evolves_to.species = { ...response.data }\r\n            })\r\n            await axios.get(`https://pokeapi.co/api/v2/pokemon/${evolves_to.species.id}`)\r\n                .then(response => {\r\n                    evolves_to.species = { ...response.data }\r\n                })\r\n            for (let secondEvo = 0; secondEvo < evolves_to.evolves_to.length; secondEvo++) {\r\n\r\n                await axios.get(evolves_to.evolves_to[secondEvo].species.url).then(response => {\r\n                    evolves_to.evolves_to[secondEvo].species = { ...response.data }\r\n                })\r\n                await axios.get(`https://pokeapi.co/api/v2/pokemon/${evolves_to.evolves_to[secondEvo].species.id}`)\r\n                    .then(response => {\r\n                        evolves_to.evolves_to[secondEvo].species = { ...response.data }\r\n                    })\r\n            }\r\n\r\n            // Load all version groups then all versions\r\n        }\r\n\r\n        setEvolutionList(Object.assign(evolutionChain.chain, { isUpdated: true }))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (loading) {\r\n            GetEvolutions()\r\n        }\r\n        if (evolutionList.isUpdated) {\r\n            setLoading(false)\r\n        }\r\n    }, [evolutionList]);\r\n\r\n    let evolutions = []\r\n\r\n    if (!loading) {\r\n        let evolutionItems = () => {\r\n            let firstEvo = (\r\n                <Card>\r\n                    <Card.Header>\r\n                        <Card.Subtitle className=\"text-center text-uppercase\">\r\n                            {evolutionList.species.name}\r\n                        </Card.Subtitle>\r\n                    </Card.Header>\r\n                    <Card.Img src={evolutionList.species.sprites.front_default} />\r\n                    <Card.Body>\r\n                        <Card.Text className=\"text-center\">\r\n                            Level\r\n                        </Card.Text>\r\n                        <Card.Text className=\"text-center\">\r\n                            {evolutionList.evolves_to[0].evolution_details[0].min_level}\r\n                        </Card.Text>\r\n                    </Card.Body>\r\n                </Card>)\r\n\r\n            let secondEvo = []\r\n            let thirdEvo = []\r\n            for (let evo = 0; evo < evolutionList.evolves_to.length; evo++) {\r\n\r\n                const evolvesTo = evolutionList.evolves_to[evo]\r\n                console.log(evolvesTo)\r\n                secondEvo.push(\r\n                    <Card>\r\n                        <Card.Header>\r\n                            <Card.Subtitle className=\"text-center text-uppercase\">\r\n                                {evolvesTo.species.name}\r\n                            </Card.Subtitle>\r\n                        </Card.Header>\r\n                        <Card.Img src={evolvesTo.species.sprites.front_default} />\r\n                        <Card.Body>\r\n                            <Card.Text className=\"text-center\">\r\n                                Level\r\n                            </Card.Text>\r\n                            <Card.Text className=\"text-center\">\r\n                                {evolvesTo.evolves_to[0].evolution_details[0].min_level}\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n                    </Card>\r\n                )\r\n                for (let evoTwo = 0; evoTwo < evolvesTo.evolves_to.length; evoTwo++) {\r\n                    thirdEvo.push(\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Card.Subtitle className=\"text-center text-uppercase\">\r\n                                    {evolvesTo.evolves_to[evoTwo].species.name}\r\n                                </Card.Subtitle>\r\n                            </Card.Header>\r\n                            <Card.Img src={evolvesTo.evolves_to[evoTwo].species.sprites.front_default} />\r\n                            <Card.Body>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    )\r\n                }\r\n            }\r\n            let evoList = []\r\n            evoList.push(firstEvo)\r\n            evoList.push(secondEvo)\r\n            evoList.push(thirdEvo)\r\n\r\n\r\n            return evoList\r\n        }\r\n\r\n        evolutions = evolutionItems()\r\n    } else { evolutions = <Card.Title className=\"text-center\">Loading...</Card.Title> }\r\n\r\n    return evolutions\r\n\r\n}\r\n\r\nexport default RenderEvolution","C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\pokemon-list\\RenderPokemon.js",[],"C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\api\\GetPokemon.js",[],"C:\\Users\\fireb\\Documents\\Programming\\websites\\pikapedia\\src\\components\\pokemon-list\\DisplayImages.js",["69","70","71"],"// React imports\r\nimport React, { useState, useMemo, useEffect, useCallback } from 'react'\r\n\r\n//Library imports\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Card from 'react-bootstrap/Card'\r\n// custom imports\r\n\r\n//functional react component\r\nconst DisplayImages = ({ pokemon }) => {\r\n    const [loading, setLoading] = useState(true)\r\n    const [image, setImage] = useState(pokemon.varieties[0].pokemon.sprites.other['official-artwork'].front_default)\r\n\r\n    const loadImage = async () => {\r\n        setImage(await image)\r\n        setLoading(false)\r\n    }\r\n    useEffect(() => {\r\n        loadImage()\r\n    }, []);\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Row>\r\n                <Col id=\"default-img\" className=\"d-flex justify-content-center\">\r\n                    {!loading ?\r\n                        <img\r\n                            src={`data:image/png;base64, ${image}`}\r\n                            alt={`Default apperance for ${pokemon.name}`} />\r\n                        : <Card.Title>Loading...</Card.Title>}\r\n                </Col>\r\n            </Row>\r\n        </Container >\r\n    )\r\n}\r\nexport default DisplayImages\r\n\r\n\r\n\r\n",{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":41,"column":8,"nodeType":"78","endLine":41,"endColumn":10,"suggestions":"79"},{"ruleId":"80","severity":1,"message":"81","line":46,"column":84,"nodeType":"82","messageId":"83","endLine":46,"endColumn":86},{"ruleId":"76","severity":1,"message":"84","line":52,"column":8,"nodeType":"78","endLine":52,"endColumn":16,"suggestions":"85"},{"ruleId":"86","severity":1,"message":"87","line":33,"column":87,"nodeType":"82","messageId":"88","endLine":35,"endColumn":14},{"ruleId":"76","severity":1,"message":"89","line":33,"column":8,"nodeType":"78","endLine":33,"endColumn":10,"suggestions":"90"},{"ruleId":"76","severity":1,"message":"91","line":59,"column":8,"nodeType":"78","endLine":59,"endColumn":23,"suggestions":"92"},{"ruleId":"93","severity":1,"message":"94","line":2,"column":27,"nodeType":"95","messageId":"96","endLine":2,"endColumn":34},{"ruleId":"93","severity":1,"message":"97","line":2,"column":47,"nodeType":"95","messageId":"96","endLine":2,"endColumn":58},{"ruleId":"76","severity":1,"message":"98","line":22,"column":8,"nodeType":"78","endLine":22,"endColumn":10,"suggestions":"99"},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.location.search'. Either include it or remove the dependency array.","ArrayExpression",["102"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.",["103"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'Versions'.","unsafeRefs","React Hook useEffect has a missing dependency: 'GetDetails'. Either include it or remove the dependency array.",["104"],"React Hook useEffect has missing dependencies: 'GetEvolutions' and 'loading'. Either include them or remove the dependency array.",["105"],"no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","'useCallback' is defined but never used.","React Hook useEffect has a missing dependency: 'loadImage'. Either include it or remove the dependency array.",["106"],"no-global-assign","no-unsafe-negation",{"desc":"107","fix":"108"},{"desc":"109","fix":"110"},{"desc":"111","fix":"112"},{"desc":"113","fix":"114"},{"desc":"115","fix":"116"},"Update the dependencies array to be: [props.location.search]",{"range":"117","text":"118"},"Update the dependencies array to be: [number, props]",{"range":"119","text":"120"},"Update the dependencies array to be: [GetDetails]",{"range":"121","text":"122"},"Update the dependencies array to be: [GetEvolutions, evolutionList, loading]",{"range":"123","text":"124"},"Update the dependencies array to be: [loadImage]",{"range":"125","text":"126"},[1012,1014],"[props.location.search]",[1407,1415],"[number, props]",[828,830],"[GetDetails]",[2319,2334],"[GetEvolutions, evolutionList, loading]",[699,701],"[loadImage]"]